for (recovered in temp.recovered){
if (recovered!= n & recovered!=n*2){
if (recovered > n){
recovered<- recovered %% n
Rt2<-comp.RT(status.matrix = status.matrix.2,individual = recovered,Rt=Rt2)
status.matrix.2$infected[recovered]<--1
status.matrix.2$Recovery[recovered]<-Inf
transmission.parameters$contact_rate_within[recovered]<-length(get.neighborhood(HH.network,recovered))
time.events<-rbind(time.events,c(current.time,-2,recovered))
if (status.matrix.1$infected[recovered]!=1){
infectives[recovered]<-0
contact.time.between$pr.ctc[recovered]<-NA
contact.time.within$pr.ctc[recovered]<-NA
index.contact.within[recovered]<-0
index.contact.between[recovered]<-0
}else{
if (homequarantine[recovered]==0){
index.contact.between[recovered]<-1
}
}
}else{
Rt1<-comp.RT(status.matrix = status.matrix.1,individual = recovered,Rt=Rt1)
status.matrix.1$infected[recovered]<--1
status.matrix.1$Recovery[recovered]<-Inf
transmission.parameters$contact_rate_within[recovered]<-length(get.neighborhood(HH.network,recovered))
time.events<-rbind(time.events,c(current.time,-1,recovered))
if (status.matrix.2$infected[recovered]!=1){
infectives[recovered]<-0
contact.time.between$pr.ctc[recovered]<-NA
contact.time.within$pr.ctc[recovered]<-NA
index.contact.within[recovered]<-0
index.contact.between[recovered]<-0
}else{
if (homequarantine[recovered]==0){
index.contact.between[recovered]<-1
}
}
}
}else{
if (recovered == 2*n){
recovered<- n
Rt2<-comp.RT(status.matrix = status.matrix.2,individual = recovered,Rt=Rt2)
status.matrix.2$infected[recovered]<--1
status.matrix.2$Recovery[recovered]<-Inf
transmission.parameters$contact_rate_within[recovered]<-length(get.neighborhood(HH.network,recovered))
time.events<-rbind(time.events,c(current.time,-2,recovered))
if (status.matrix.1$infected[recovered]!=1){
infectives[recovered]<-0
contact.time.between$pr.ctc[recovered]<-NA
contact.time.within$pr.ctc[recovered]<-NA
index.contact.within[recovered]<-0
index.contact.between[recovered]<-0
}else{
if (homequarantine[recovered]==0){
index.contact.between[recovered]<-1
}
}
}else{
Rt1<-comp.RT(status.matrix = status.matrix.1,individual = recovered,Rt=Rt1)
status.matrix.1$infected[recovered]<--1
status.matrix.1$Recovery[recovered]<-Inf
transmission.parameters$contact_rate_within[recovered]<-length(get.neighborhood(HH.network,recovered))
time.events<-rbind(time.events,c(current.time,-1,recovered))
if (status.matrix.2$infected[recovered]!=1){
infectives[recovered]<-0
contact.time.between$pr.ctc[recovered]<-NA
contact.time.within$pr.ctc[recovered]<-NA
index.contact.within[recovered]<-0
index.contact.between[recovered]<-0
}else{
if (homequarantine[recovered]==0){
index.contact.between[recovered]<-1
}
}
}
}
if (stop.quarantine[recovered]==current.time){
homequarantine[recovered]<-0
stop.quarantine[recovered]<-Inf
}
}
}
if (next.evts=="NewPathogen"){
current.time<-events$NewPathogen
events$NewPathogen<-Inf
first.cases<-sample(1:n,nSeeds.2)
for (j in first.cases){
first<-j
status.matrix.2$infected[first] <- 1
status.matrix.2$time.of.infection[first] <- current.time
status.matrix.2$Recovery[first]<-current.time+infectious.period.length(pathogen=pathogen.2)
if (runif(1)<rho.2){ #if symptomatic
transmission.parameters$q2h[first]<-inf.path.2.h #A single q parameter for everyone
transmission.parameters$q2g[first]<-inf.path.2.g #A single q parameter for everyone
status.matrix.2$severity[first]<-1
status.matrix.2$TimeSymptomOnset[first]<-current.time+incubation.period(pathogen=pathogen.2)
if (runif(1)<bc.2){
homequarantine.day.2[first]<-status.matrix.2$TimeSymptomOnset[first]
}
time.events<-rbind(time.events,c(current.time,2.1,first))
}else{
transmission.parameters$q2h[first]<-inf.path.2.h*alpha.as.2 #A single q parameter for everyone
transmission.parameters$q2g[first]<-inf.path.2.g*alpha.as.2 #A single q parameter for everyone
status.matrix.2$severity[first]<-2
time.events<-rbind(time.events,c(current.time,2.2,first))
}
if (infectives[first]==0){
infectives[first]<-1
contact.time.within$pr.ctc[first]<-ifelse(transmission.parameters$contact_rate_within[first]!=0,rexp(1,transmission.parameters$contact_rate_within[first])+current.time,Inf)       # I generate the next interarrival time for individual i
if (homequarantine[first]==0){
contact.time.between$pr.ctc[first]<-rexp(1,transmission.parameters$contact_rate_between[first])+current.time # I generate the next interarrival time for individual i
}
}
}
}
if (next.evts=="NewSeeding1"){
current.time<-events$NewSeeding1
events$NewSeeding1<-current.time+t.seed
not.infected<-which(status.matrix.1$infected!=1)
if (nSeeds.1<length(not.infected)){
first.cases<-sample(not.infected,nSeeds.1)
for (j in first.cases){
first<-j
status.matrix.1$infected[first] <- 1
status.matrix.1$time.of.infection[first] <- current.time
status.matrix.1$Recovery[first]<-current.time+infectious.period.length(pathogen=pathogen.1)
if (runif(1)<rho.1){ #if symptomatic
transmission.parameters$q1h[first]<-inf.path.1.h #A single q parameter for everyone
transmission.parameters$q1g[first]<-inf.path.1.g #A single q parameter for everyone
status.matrix.1$severity[first]<-1
status.matrix.1$TimeSymptomOnset[first]<-current.time+incubation.period(pathogen=pathogen.2)
if (runif(1)<bc.1){
homequarantine.day.1[first]<-status.matrix.1$TimeSymptomOnset[first]
}
time.events<-rbind(time.events,c(current.time,1.1,first))
}else{
transmission.parameters$q1h[first]<-inf.path.1.h*alpha.as.1 #A single q parameter for everyone
transmission.parameters$q1g[first]<-inf.path.1.g*alpha.as.1 #A single q parameter for everyone
status.matrix.1$severity[first]<-2
time.events<-rbind(time.events,c(current.time,1.2,first))
}
if (infectives[first]==0){
infectives[first]<-1
contact.time.within$pr.ctc[first]<-ifelse(transmission.parameters$contact_rate_within[first]!=0,rexp(1,transmission.parameters$contact_rate_within[first])+current.time,Inf)       # I generate the next interarrival time for individual i
if (homequarantine[first]==0){
contact.time.between$pr.ctc[first]<-rexp(1,transmission.parameters$contact_rate_between[first])+current.time # I generate the next interarrival time for individual i
}
}
}
}
}
if (next.evts=="NewSeeding2"){
current.time<-events$NewSeeding1
events$NewSeeding2<-current.time+t.seed
not.infected<-which(status.matrix.2$infected!=1)
if (nSeeds.2<length(not.infected)){
first.cases<-sample(not.infected,nSeeds.2)
for (j in first.cases){
first<-j
status.matrix.2$infected[first] <- 1
status.matrix.2$time.of.infection[first] <- current.time
status.matrix.2$Recovery[first]<-current.time+infectious.period.length(pathogen=pathogen.2)
if (runif(1)<rho.2){ #if symptomatic
transmission.parameters$q2h[first]<-inf.path.2.h #A single q parameter for everyone
transmission.parameters$q2g[first]<-inf.path.2.g #A single q parameter for everyone
status.matrix.2$severity[first]<-1
status.matrix.2$TimeSymptomOnset[first]<-current.time+incubation.period(pathogen=pathogen.2)
if (runif(1)<bc.2){
homequarantine.day.2[first]<-status.matrix.2$TimeSymptomOnset[first]
}
time.events<-rbind(time.events,c(current.time,2.1,first))
}else{
transmission.parameters$q2h[first]<-inf.path.2.h*alpha.as.2 #A single q parameter for everyone
transmission.parameters$q2g[first]<-inf.path.2.g*alpha.as.2 #A single q parameter for everyone
status.matrix.2$severity[first]<-2
time.events<-rbind(time.events,c(current.time,2.2,first))
}
if (infectives[first]==0){
infectives[first]<-1
contact.time.within$pr.ctc[first]<-ifelse(transmission.parameters$contact_rate_within[first]!=0,rexp(1,transmission.parameters$contact_rate_within[first])+current.time,Inf)       # I generate the next interarrival time for individual i
if (homequarantine[first]==0){
contact.time.between$pr.ctc[first]<-rexp(1,transmission.parameters$contact_rate_between[first])+current.time # I generate the next interarrival time for individual i
}
}
}
}
}
}
#When also the other pathogen is present.
time.events<-time.events[-1,]
timev.name<-c("time","event","who")
dimnames(time.events)<-list(NULL,timev.name)
C1<-nSeeds.1
C2<-nSeeds.2
Y1<-nSeeds.1
Y2<-nSeeds.2
last.day<-round(max(time.events[,1]))
for (i in 1:last.day){
temp.time<-setdiff(which(time.events[,1]>i),which(time.events[,1]>i+1))
temp.inf.1<-c(which(time.events[temp.time,2]==1.1),which(time.events[temp.time,2]==1.2))
temp.inf.2<-c(which(time.events[temp.time,2]==2.1),which(time.events[temp.time,2]==2.2))
temp.time.1<-setdiff(1:length(time.events[,1]),which(time.events[,1]>i+1))
C1<- c(C1,length((which(time.events[temp.time.1,2]==1.1)))+length((which(time.events[temp.time.1,2]==1.2)))-length((which(time.events[temp.time.1,2]==-1))))
C2<- c(C2,length((which(time.events[temp.time.1,2]==2.1)))+length((which(time.events[temp.time.1,2]==2.2)))-length((which(time.events[temp.time.1,2]==-2))))
Y1<- c(Y1,length(temp.inf.1))
Y2<-c(Y2,length(temp.inf.2))
}
Fs1<-length(which(time.events[,2]==1.1))+length(which(time.events[,2]==1.2))
Fs2<-length(which(time.events[,2]==2.1))+length(which(time.events[,2]==2.2))
epi.details<-data.frame("Days"=0:last.day, "Incidence1"=Y1,"Incidence2"=Y2, "Prevalence1"=C1,"Prevalence2"=C2)
FinalSize<-data.frame("FinalSize1"=Fs1,"FinalSize2"=Fs2)
PeakIncidence<-data.frame("PeakIncidence1"=max(epi.details$Incidence1),"TimePeakIncidence1"=which(epi.details$Incidence1==max(epi.details$Incidence1))[1],"PeakIncidence2"=max(epi.details$Incidence2),"TimePeakIncidence2"=which(epi.details$Incidence2==max(epi.details$Incidence2))[1] )
PeakPrevalence<-data.frame("PeakPrevalence1"=max(epi.details$Prevalence1),"TimePeakPrevalence1"=which(epi.details$Prevalence1==max(epi.details$Prevalence1))[1],"PeakPrevalence2"=max(epi.details$Prevalence2),"TimePeakPrevalence2"=which(epi.details$Prevalence2==max(epi.details$Prevalence2))[1] )
#Compute the reproduction number related to the selected network.
source("function.multipathogen.new.R")
setwd("~/Library/CloudStorage/GoogleDrive-andrea.torneri@uhasselt.be/My Drive/Work/PhD/Co-infection/Multi-phatogen")
#Compute the reproduction number related to the selected network.
source("function.multipathogen.new.R")
nSim<-1
epi.outbreak<-list()
nSeed<-1062021
set.seed(nSeed)
nm<-paste("t2_",t2, "_sigma12_",sigma12,"_sigma21_",sigma21,"_qh1_",inf.path.1.h,"_qg1_",inf.path.1.g,"_qh2_",inf.path.2.h,"_qg2_",inf.path.2.g, "_rho1_",rho.1,"_rho2_",rho.2,"_alpha1_",alpha.as.1,"_alpha2_",alpha.as.2,"_Path1",pathogen.1,"_Path2",pathogen.2,"_lli.1",lli.1,"_lli2",lli.2, sep = "")
print(nm)
start<-Sys.time()
for (i in 1:nSim){
print(i)
temp.HH.netw<-HH.networks[[sample(1:length(HH.networks),1)]]
epi.outbreak[[i]]<-sim.multipathogen(HH.network = temp.HH.netw, t2=t2, lambda.g = lambda.g, sigma12 = sigma12, sigma21 = sigma21, prop.immune = prop.immune, nSeeds.1 = nSeeds.1, nSeeds.2 = nSeeds.2, rho.1 = rho.1, rho.2 = rho.2, inf.path.1.h = inf.path.1.h,inf.path.1.g = inf.path.1.g, inf.path.2.h = inf.path.2.h,inf.path.2.g = inf.path.2.g, alpha.as.1=alpha.as.1,alpha.as.2=alpha.as.2, lli.1=lli.1,lli.2=lli.2, pathogen.1=pathogen.1, pathogen.2=pathogen.2, contact.reduction=contact.reduction, t.stop=t.stop, t.seed=t.seed, bc.1=bc.1, bc.2=bc.2, reinf=reinf, typeIC=typeIC, het.vac=het.vac, t.imm.lim=t.imm.lim)
}
print(Sys.time()-start)
#Compute the reproduction number related to the selected network.
source("function.multipathogen.new.R")
nSim<-1
epi.outbreak<-list()
nSeed<-1062021
set.seed(nSeed)
nm<-paste("t2_",t2, "_sigma12_",sigma12,"_sigma21_",sigma21,"_qh1_",inf.path.1.h,"_qg1_",inf.path.1.g,"_qh2_",inf.path.2.h,"_qg2_",inf.path.2.g, "_rho1_",rho.1,"_rho2_",rho.2,"_alpha1_",alpha.as.1,"_alpha2_",alpha.as.2,"_Path1",pathogen.1,"_Path2",pathogen.2,"_lli.1",lli.1,"_lli2",lli.2, sep = "")
print(nm)
start<-Sys.time()
for (i in 1:nSim){
print(i)
temp.HH.netw<-HH.networks[[sample(1:length(HH.networks),1)]]
epi.outbreak[[i]]<-sim.multipathogen(HH.network = temp.HH.netw, t2=t2, lambda.g = lambda.g, sigma12 = sigma12, sigma21 = sigma21, prop.immune = prop.immune, nSeeds.1 = nSeeds.1, nSeeds.2 = nSeeds.2, rho.1 = rho.1, rho.2 = rho.2, inf.path.1.h = inf.path.1.h,inf.path.1.g = inf.path.1.g, inf.path.2.h = inf.path.2.h,inf.path.2.g = inf.path.2.g, alpha.as.1=alpha.as.1,alpha.as.2=alpha.as.2, lli.1=lli.1,lli.2=lli.2, pathogen.1=pathogen.1, pathogen.2=pathogen.2, contact.reduction=contact.reduction, t.stop=t.stop, t.seed=t.seed, bc.1=bc.1, bc.2=bc.2, reinf=reinf, typeIC=typeIC, het.vac=het.vac, t.imm.lim=t.imm.lim)
}
print(Sys.time()-start)
#Compute the reproduction number related to the selected network.
source("function.multipathogen.new.R")
nSim<-1
epi.outbreak<-list()
nSeed<-1062021
set.seed(nSeed)
nm<-paste("t2_",t2, "_sigma12_",sigma12,"_sigma21_",sigma21,"_qh1_",inf.path.1.h,"_qg1_",inf.path.1.g,"_qh2_",inf.path.2.h,"_qg2_",inf.path.2.g, "_rho1_",rho.1,"_rho2_",rho.2,"_alpha1_",alpha.as.1,"_alpha2_",alpha.as.2,"_Path1",pathogen.1,"_Path2",pathogen.2,"_lli.1",lli.1,"_lli2",lli.2, sep = "")
print(nm)
start<-Sys.time()
for (i in 1:nSim){
print(i)
temp.HH.netw<-HH.networks[[sample(1:length(HH.networks),1)]]
epi.outbreak[[i]]<-sim.multipathogen(HH.network = temp.HH.netw, t2=t2, lambda.g = lambda.g, sigma12 = sigma12, sigma21 = sigma21, prop.immune = prop.immune, nSeeds.1 = nSeeds.1, nSeeds.2 = nSeeds.2, rho.1 = rho.1, rho.2 = rho.2, inf.path.1.h = inf.path.1.h,inf.path.1.g = inf.path.1.g, inf.path.2.h = inf.path.2.h,inf.path.2.g = inf.path.2.g, alpha.as.1=alpha.as.1,alpha.as.2=alpha.as.2, lli.1=lli.1,lli.2=lli.2, pathogen.1=pathogen.1, pathogen.2=pathogen.2, contact.reduction=contact.reduction, t.stop=t.stop, t.seed=t.seed, bc.1=bc.1, bc.2=bc.2, reinf=reinf, typeIC=typeIC, het.vac=het.vac, t.imm.lim=t.imm.lim)
}
print(Sys.time()-start)
library(tidyverse)
library(HistData)
install.packages()
install.packages("HistData")
library(tidyverse)
library(HistData)
data("GaltonFamilies")
library(tidyverse)
library(HistData)
data("GaltonFamilies")
set.seed(1987)
galton.heights<- GaltonFamilies %>%
filter(gender=="male") %>%
group_by(family) %>%
sample_n(1) %>%
ungroup() %>%
select(father,childHeight) %>%
rename(son=childHeight)
galton.heights
GaltonFamilies
galton.heights<- GaltonFamilies %>%
filter(gender=="male") %>%
group_by(family) %>%
galton.heights2<- GaltonFamilies %>%
filter(gender=="male") %>%
group_by(family)
galton.heights2
galton.heights2<- GaltonFamilies %>%
filter(gender=="male") %>%
group_by(family) %>%
sample_n(1)
galton.heights2
GaltonFamilies
galton.heights2<- GaltonFamilies %>%
filter(gender=="male") %>%
group_by(family) %>%
sample_n(1) %>%
select(father,childHeight) %>%
rename(son=childHeight)
galton.heights2
galton.heights2<- GaltonFamilies %>%
filter(gender=="male") %>%
group_by(family) %>%
sample_n(1) %>%
ungroup() %>%
select(father,childHeight) %>%
rename(son=childHeight)
galton.heights
galton.heights %>%
summarize(mean(father),sd(father),mean(son),sd(son))
galton.heights %>%
ggplot()
galton.heights %>%
ggplot(aes(father,son))+
geom_point(alpha=0.5)
ds_theme_set()
library(dslabs)
ds_theme_set()
galton.heights %>%
ggplot(aes(father,son))+
geom_point(alpha=0.5)
galton.heights %>%
ggplot(aes(father,son))+
geom_point(alpha=1)
library(dslabs)
ds_theme_set()
galton.heights %>%
ggplot(aes(son,father))+
geom_point(alpha=1)
library(tidyverse)
library(HistData)
data("GaltonFamilies")
set.seed(1987)
galton.heights<- GaltonFamilies %>%
filter(gender=="male") %>%
group_by(family) %>%
sample_n(1) %>%
ungroup() %>%
select(father,childHeight) %>%
rename(son=childHeight)
galton.heights %>%
summarize(mean(father),sd(father),mean(son),sd(son))
library(dslabs)
ds_theme_set()
galton.heights %>%
ggplot(aes(father,son))+
geom_point(alpha=1)
galton_heights %>% summarize(cor(father, son))
galton.heights %>% summarize(cor(father, son))
my_sample <- slice_sample(galton.heights, n = 25, replace = TRUE)
R <- my_sample %>% summarize(cor(father, son))
R
# Monte Carlo simulation to show distribution of sample correlation
B <- 1000
N <- 25
# Monte Carlo simulation to show distribution of sample correlation
B <- 1000
N <- 25
R <- replicate(B, {
slice_sample(galton.heights, n = N, replace = TRUE) %>%
summarize(r=cor(father, son)) %>% .$r
})
data.frame(R) %>% ggplot(aes(R)) + geom_histogram(binwidth = 0.05, color = "black")
mean(R)
sd
sd(R)
data.frame(R) %>%
ggplot(aes(sample = R)) +
stat_qq() +
geom_abline(intercept = mean(R), slope = sqrt((1-mean(R)^2)/(N-2)))
library(Lahman)
library(Lahman)
Teams %>% filter(yearID %in% 1961:2001)
Teams %>% filter(yearID %in% 1961:2001) %>%
mutate(AB_per_game = AB / G, R_per_game = R / G) %>%
ggplot(aes(AB_per_game,R_per_game))+
geom_point()
Teams %>% filter(yearID %in% 1961:2001) %>%
mutate(AB_per_game = AB / G, R_per_game = R / G) %>%
ggplot(aes(AB_per_game,R_per_game))+
geom_point() %>%
summaeize (cor(AB_per_game,R_per_game))
Teams %>% filter(yearID %in% 1961:2001) %>%
mutate(AB_per_game = AB / G, R_per_game = R / G) %>%
ggplot(aes(AB_per_game,R_per_game))+
geom_point() %>%
summarize (cor(AB_per_game,R_per_game))
Teams %>% filter(yearID %in% 1961:2001) %>%
mutate(AB_per_game = AB / G, R_per_game = R / G) %>%
ggplot(aes(AB_per_game,R_per_game))+
geom_point() %>%
summarize(cor(AB_per_game,R_per_game))
Teams %>% filter(yearID %in% 1961:2001) %>%
mutate(AB_per_game = AB / G, R_per_game = R / G) %>%
summarize(cor(AB_per_game,R_per_game))
Teams %>% filter(yearID %in% 1961:2001) %>%
mutate(AB_per_game = AB / G, R_per_game = R / G) %>%
summarize(cor(AB_per_game,R_per_game)) %>%
ggplot(aes(AB_per_game,R_per_game))+
geom_point()
Teams %>% filter(yearID %in% 1961:2001) %>%
mutate(AB_per_game = AB / G, R_per_game = R / G) %>%
summarize(cor(AB_per_game,R_per_game)) %>%
Teams %>% filter(yearID %in% 1961:2001) %>%
mutate(AB_per_game = AB / G, R_per_game = R / G) %>%
ggplot(aes(AB_per_game,R_per_game))+
geom_point()
Teams %>% filter(yearID %in% 1961:2001) %>%
mutate(AB_per_game = AB / G, R_per_game = R / G) %>%
summarize(cor(AB_per_game,R_per_game))
Teams %>% filter(yearID %in% 1961:2001) %>%
mutate(AB_per_game = AB / G, R_per_game = R / G) %>%
ggplot(aes(AB_per_game,R_per_game))+
geom_point()
Teams %>% filter(yearID %in% 1961:2001) %>%
mutate(W_per_game = W / G, E_per_game = E / G) %>%
ggplot(aes(AB_per_game,R_per_game))+
geom_point()
Teams %>% filter(yearID %in% 1961:2001) %>%
mutate(W_per_game = W / G, E_per_game = E / G) %>%
ggplot(aes(W_per_game,E_per_game))+
geom_point()
Teams %>% filter(yearID %in% 1961:2001) %>%
mutate(W_per_game = W / G, E_per_game = E / G) %>%
summarize(cor(W_per_game,E_per_game))
Teams %>% filter(yearID %in% 1961:2001) %>%
mutate(D_per_game = X2B / G, T_per_game = X3B / G) %>%
ggplot(aes(D_per_game,T_per_game))+
geom_point()
Teams %>% filter(yearID %in% 1961:2001) %>%
mutate(D_per_game = X2B / G, T_per_game = X3B / G) %>%
summarize(cor(D_per_game,T_per_game))
# predicted height of a son with a 72 inch tall father
conditional_avg <- galton_heights %>%
filter(round(father) == 72) %>%
summarize(avg = mean(son)) %>%
pull(avg)
# predicted height of a son with a 72 inch tall father
conditional_avg <- galton.heights %>%
filter(round(father) == 72) %>%
summarize(avg = mean(son)) %>%
pull(avg)
conditional_avg
# stratify fathers' heights to make a boxplot of son heights
galton_heights %>% mutate(father_strata = factor(round(father))) %>%
ggplot(aes(father_strata, son)) +
geom_boxplot() +
geom_point()
# stratify fathers' heights to make a boxplot of son heights
galton.heights %>% mutate(father_strata = factor(round(father))) %>%
ggplot(aes(father_strata, son)) +
geom_boxplot() +
geom_point()
galton.heights %>%
mutate(father = round(father)) %>%
group_by(father) %>%
summarize(son_conditional_avg = mean(son)) %>%
ggplot(aes(father, son_conditional_avg)) +
geom_point()
r <- galton_heights %>% summarize(r = cor(father, son)) %>% pull(r)
r <- galton.heights %>% summarize(r = cor(father, son)) %>% pull(r)
galton_heights %>%
mutate(father = scale(father), son = scale(son)) %>%
mutate(father = round(father)) %>%
group_by(father) %>%
summarize(son = mean(son)) %>%
ggplot(aes(father, son)) +
geom_point() +
geom_abline(intercept = 0, slope = r)
galton.heights %>%
mutate(father = scale(father), son = scale(son)) %>%
mutate(father = round(father)) %>%
group_by(father) %>%
summarize(son = mean(son)) %>%
ggplot(aes(father, son)) +
geom_point() +
geom_abline(intercept = 0, slope = r)
# add regression line to original data
mu_x <- mean(galton_heights$father)
mu_y <- mean(galton_heights$son)
s_x <- sd(galton_heights$father)
s_y <- sd(galton_heights$son)
r <- cor(galton_heights$father, galton_heights$son)
m <-  r * s_y / s_x
b <- mu_y - m*mu_x
galton_heights %>%
ggplot(aes(father, son)) +
geom_point(alpha = 0.5) +
geom_abline(intercept = b, slope = m )
# add regression line to original data
mu_x <- mean(galton.heights$father)
mu_y <- mean(galton.heights$son)
s_x <- sd(galton.heights$father)
s_y <- sd(galton.heights$son)
r <- cor(galton.heights$father, galton.heights$son)
m <-  r * s_y / s_x
b <- mu_y - m*mu_x
galton.heights %>%
ggplot(aes(father, son)) +
geom_point(alpha = 0.5) +
geom_abline(intercept = b, slope = m )
# plot in standard units and see that intercept is 0 and slope is rho
galton_heights %>%
ggplot(aes(scale(father), scale(son))) +
geom_point(alpha = 0.5) +
geom_abline(intercept = 0, slope = r)
# plot in standard units and see that intercept is 0 and slope is rho
galton.heights %>%
ggplot(aes(scale(father), scale(son))) +
geom_point(alpha = 0.5) +
geom_abline(intercept = 0, slope = r)
