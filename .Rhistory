dI2 <-  beta2 * I2 * S2 - gamma1 * I2
dR2 <-  gamma2 * I2
}else{
dS2<-0
dI2<-0
dR2<-0
}
return(list(c(dS1, dI1, dR1,dS2,dI2,dR2)))
})
}
parameters_values <- c(
beta1  <- 0.004, # infectious contact rate (/person/day)
gamma1 <- 0.5,    # recovery rate (/day)
beta2  <- 0.03, # infectious contact rate (/person/day)
gamma3 <- 0.5    # recovery rate (/day)
)
initial_values <- c(
S1 = 999,  # number of susceptibles at time = 0
I1 =   1,  # number of infectious at time = 0
R1 =   0,   # number of recovered (and immune) at time = 0
S2 = 999,  # number of susceptibles at time = 0
I2=   1,  # number of infectious at time = 0
R2 =   0   # number of recovered (and immune) at time = 0
)
time_values <- seq(0, 100) # days
sir_values_1 <- ode(
y = initial_values,
times = time_values,
func = sir_equations,
parms = parameters_values
)
parameters_values <- c(
beta1  <- 0.004, # infectious contact rate (/person/day)
gamma1 <- 0.5,    # recovery rate (/day)
beta2  <- 0.03, # infectious contact rate (/person/day)
gamma2 <- 0.5    # recovery rate (/day)
)
initial_values <- c(
S1 = 999,  # number of susceptibles at time = 0
I1 =   1,  # number of infectious at time = 0
R1 =   0,   # number of recovered (and immune) at time = 0
S2 = 999,  # number of susceptibles at time = 0
I2=   1,  # number of infectious at time = 0
R2 =   0   # number of recovered (and immune) at time = 0
)
time_values <- seq(0, 100) # days
sir_values_1 <- ode(
y = initial_values,
times = time_values,
func = sir_equations,
parms = parameters_values
)
sir_values_1
plot(sir_values_1[2,],sir_values_1[4] )
plot(sir_values_1[2,],sir_values_1[4,] )
plot(sir_values_1[1,],sir_values_1[3,] )
sir_values_1[1,]
sir_values_1[1;]
sir_values_1[1]
sir_values_1<-as.data.frame(sir_values_1)
plot(sir_values_1$time,sir_values_1$I1)
plot(sir_values_1$time,sir_values_1$I1, type = "l")
lines(sir_values_1$time,sir_values_1$I2, type = "l", col="red")
ca<-c(973,3982,7231)
t<-c(0,30,60)
plot(t,ca)
plot(t,log(ca))
lm (log(ca)~t )
plot(t,log(ca))
lm (t~ log(ca) )
lm (log(ca)~t )
lm (t~ log(ca) )
lm (log(ca)~t )
lm (log(ca)~t -1 )
0.17*3.33+1
44858.68-32965.84
0.5-0.5*10/100
0.45*3
1.5-0.1*1.5
1.014939*dgamma(t,shape = 3.2930139,scale = 0.9533298)
t<-seq(0,8,0.01)
plot(t,1.014939*dgamma(t,shape = 3.2930139,scale = 0.9533298))
VL<-data.frame(x=0:8,y=c(0,1.75,3,2.5,1.8,1.25,0.75,0.5,0))
vl.flu<-nlsLM(y~a*dgamma(x=x,shape = s1,scale = sc1),start = list(a=10,s1=1.5,sc1=1.5),data = VL, weights = c(0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,1))
# Setting infectiousness measure according to Carrat et al. (2008) for H1N1
VL<-data.frame(x=0:8,y=c(0,1.75,3,2.5,1.8,1.25,0.75,0.5,0))
vl.flu<-nlsLM(y~a*dgamma(x=x,shape = s1,scale = sc1),start = list(a=10,s1=1.5,sc1=1.5),data = VL, weights = c(0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,10))
library(minpack.lm)
# Setting infectiousness measure according to Carrat et al. (2008) for H1N1
VL<-data.frame(x=0:8,y=c(0,1.75,3,2.5,1.8,1.25,0.75,0.5,0))
vl.flu<-nlsLM(y~a*dgamma(x=x,shape = s1,scale = sc1),start = list(a=10,s1=1.5,sc1=1.5),data = VL, weights = c(0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,10))
prms<-vl.flu$m$getPars()
print(prms)
plot(seq(0,8,0.1),prms[1]*dgamma(x=seq(0,8,0.1),shape = prms[2],scale = prms[3]),ylim = c(0,3.1))
points(VL, col="red")
f.vl<-function(t){
return(prms[1]*dgamma(t,shape = prms[2],scale = prms[3]))
}
k<-integrate(f.vl,lower = 0,upper = 8)
vl.flu<-nlsLM(y~a*dgamma(x=x,shape = s1,scale = sc1),start = list(a=10,s1=1.5,sc1=1.5),data = VL, weights = c(0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,20))
prms<-vl.flu$m$getPars()
print(prms)
plot(seq(0,8,0.1),prms[1]*dgamma(x=seq(0,8,0.1),shape = prms[2],scale = prms[3]),ylim = c(0,3.1))
points(VL, col="red")
f.vl<-function(t){
return(prms[1]*dgamma(t,shape = prms[2],scale = prms[3]))
}
k<-integrate(f.vl,lower = 0,upper = 8)
prms[1]/ k$value
prms[2]
prms[3]
# Pathogens and their viral characteristics ----
InfMeas.SynthPath<-function(t){
t.ret<-NULL
for (i in 1:length(t)){
if (t[i] <=2){
t.ret<-c(t.ret,(0.25*t[i]))
}else{
t.ret<-c(t.ret,(-0.25*t[i]+1))
}
}
return(t.ret)
}
time.points<-seq(0,4,0.1)
#ip.covid19<-dlnorm(time.points,meanlog = log(5.2),sdlog = log(1.7))
#ip.fluA<-dlnorm(time.points,meanlog = log(1.4),sdlog = log(1.51))
#ip.rsv<-dlnorm(time.points,meanlog = log(4.4),sdlog = log(1.24))
infM<-InfMeas.SynthPath(time.points)
#inf.rsv<-dgamma(time.points,shape = 15, rate = 2.6)/ (pgamma(12,shape = 15,rate = 2.6))
#Inc.Periods<-data.frame(x=rep(time.points,2),y=c(ip.covid19,ip.fluA), Disease=c(rep("COVID-19",length(time.points)),rep("FLU-A",length(time.points))), Quantity=rep("IncubationPeriod",length(time.points)*2) )
Inf.Measure<-data.frame(x=time.points,y=infM , Quantity=rep("InfectiousnessMeasure",length(time.points)))
dt<-data.frame(x=Inf.Measure$x, y=Inf.Measure$y, Quantity=c(as.character(Inf.Measure$Quantity)))
pt<-data.frame(x=c(1,2,3), y=c(0.25,0.5,0.25), path=c("XB","XS","XA"))
pt$path<-factor(pt$path,levels = c("XB","XS","XA"))
a1<-ggplot(dt, aes(x=x, y=y))+geom_line(data = Inf.Measure, aes(x=x, y=y),lwd=0.5,lty=1)+
theme_minimal()+theme(
legend.key.size = unit(0.8, "cm"),
legend.key.width = unit(0.8,"cm"),
legend.title = element_text(size=17, face = "bold"),
legend.text = element_text(size=15),
axis.text.x = element_text(size=16),
axis.title = element_text(size=20),
axis.text.y = element_text(size=16),
text = element_text(size=20, face = "bold"),
) + xlab("Days")+ylab("Infectiousness Measure")+scale_color_brewer(palette = "Dark2")+ylim(c(0,0.6))+geom_point(data=pt,aes(x=x,y=y,color=path),shape=4,size=5,stroke=1.1)+labs(color="Pathogen:")
#libraries
library(ggplot2)
library(ggpubr)
##############################
#Network information
netw<-"Synth"
n.vertex<-2500
n.networks<-100
nSim<-250
# Pathogens and their viral characteristics ----
InfMeas.SynthPath<-function(t){
t.ret<-NULL
for (i in 1:length(t)){
if (t[i] <=2){
t.ret<-c(t.ret,(0.25*t[i]))
}else{
t.ret<-c(t.ret,(-0.25*t[i]+1))
}
}
return(t.ret)
}
time.points<-seq(0,4,0.1)
#ip.covid19<-dlnorm(time.points,meanlog = log(5.2),sdlog = log(1.7))
#ip.fluA<-dlnorm(time.points,meanlog = log(1.4),sdlog = log(1.51))
#ip.rsv<-dlnorm(time.points,meanlog = log(4.4),sdlog = log(1.24))
infM<-InfMeas.SynthPath(time.points)
#inf.rsv<-dgamma(time.points,shape = 15, rate = 2.6)/ (pgamma(12,shape = 15,rate = 2.6))
#Inc.Periods<-data.frame(x=rep(time.points,2),y=c(ip.covid19,ip.fluA), Disease=c(rep("COVID-19",length(time.points)),rep("FLU-A",length(time.points))), Quantity=rep("IncubationPeriod",length(time.points)*2) )
Inf.Measure<-data.frame(x=time.points,y=infM , Quantity=rep("InfectiousnessMeasure",length(time.points)))
dt<-data.frame(x=Inf.Measure$x, y=Inf.Measure$y, Quantity=c(as.character(Inf.Measure$Quantity)))
pt<-data.frame(x=c(1,2,3), y=c(0.25,0.5,0.25), path=c("XB","XS","XA"))
pt$path<-factor(pt$path,levels = c("XB","XS","XA"))
a1<-ggplot(dt, aes(x=x, y=y))+geom_line(data = Inf.Measure, aes(x=x, y=y),lwd=0.5,lty=1)+
theme_minimal()+theme(
legend.key.size = unit(0.8, "cm"),
legend.key.width = unit(0.8,"cm"),
legend.title = element_text(size=17, face = "bold"),
legend.text = element_text(size=15),
axis.text.x = element_text(size=16),
axis.title = element_text(size=20),
axis.text.y = element_text(size=16),
text = element_text(size=20, face = "bold"),
) + xlab("Days")+ylab("Infectiousness Measure")+scale_color_brewer(palette = "Dark2")+ylim(c(0,0.6))+geom_point(data=pt,aes(x=x,y=y,color=path),shape=4,size=5,stroke=1.1)+labs(color="Pathogen:")
plot(a1)
time.points1<-seq(0,15,0.1)
time.points2<-seq(0,8,0.1)
#ip.covid19<-dlnorm(time.points,meanlog = log(5.2),sdlog = log(1.7))
#ip.fluA<-dlnorm(time.points,meanlog = log(1.4),sdlog = log(1.51))
#ip.rsv<-dlnorm(time.points,meanlog = log(4.4),sdlog = log(1.24))
inf.covid19<-dgamma(time.points1,shape = 12, rate = 2.08)/ (pgamma(15,shape = 2,rate = 2.08))
inf.fluA<-1.014939*dgamma(time.points2,shape = 3.2930139,scale = 0.9533298)
#inf.rsv<-dgamma(time.points,shape = 15, rate = 2.6)/ (pgamma(12,shape = 15,rate = 2.6))
#Inc.Periods<-data.frame(x=rep(time.points,2),y=c(ip.covid19,ip.fluA), Disease=c(rep("COVID-19",length(time.points)),rep("FLU-A",length(time.points))), Quantity=rep("IncubationPeriod",length(time.points)*2) )
Inf.Measure<-data.frame(x=c(time.points1,time.points2),y=c(inf.covid19,inf.fluA) , Disease=c(rep("COVID-19",length(time.points1)),rep("FLU-A",length(time.points2))), Quantity=rep("InfectiousnessMeasure",length(time.points1)+length(time.points2)))
dt<-data.frame(x=Inf.Measure$x, y=Inf.Measure$y,Disease=c(as.character(Inf.Measure$Disease)), Quantity=c(as.character(Inf.Measure$Quantity)))
pt<-data.frame(x=c(0,0), y=c(0,0), Quantity=c("InfectiousnessMeasure"))
a2<-ggplot(dt, aes(x=x, y=y))+geom_line(data = Inf.Measure, aes(x=x, y=y, col=Disease),lwd=1.3,lty=1)+
theme_minimal()+theme(
legend.key.size = unit(0.8, "cm"),
legend.key.width = unit(0.8,"cm"),
legend.title = element_text(size=17, face = "bold"),
legend.text = element_text(size=16),
axis.text.x = element_text(size=16),
axis.title = element_text(size=20),
axis.text.y = element_text(size=16),
text = element_text(size=20, face = "bold"),
) + xlab("Days")+ylab("Infectiousness Measure")+scale_color_manual(values=c("#FFDB6D","#00AFBB"))+geom_vline(xintercept = 11/2.08,colour="#FFDB6D",lty=2,lwd=0.8)+geom_vline(xintercept = 2,colour="#00AFBB",lty=2,lwd=0.8)+ylim(c(0,0.4))
plot(a2)
ggarrange(a1,a2, labels = c("A","B"), nrow = 2)
prms[2]
prms[3]
prms[1]/ k$value
###############################################################################################################
# Pathogens and their viral characteristics ----
InfMeas.SynthPath<-function(t){
t.ret<-NULL
for (i in 1:length(t)){
if (t[i] <=2){
t.ret<-c(t.ret,(0.25*t[i]))
}else{
t.ret<-c(t.ret,(-0.25*t[i]+1))
}
}
return(t.ret)
}
time.points<-seq(0,4,0.1)
#ip.covid19<-dlnorm(time.points,meanlog = log(5.2),sdlog = log(1.7))
#ip.fluA<-dlnorm(time.points,meanlog = log(1.4),sdlog = log(1.51))
#ip.rsv<-dlnorm(time.points,meanlog = log(4.4),sdlog = log(1.24))
infM<-InfMeas.SynthPath(time.points)
#Inc.Periods<-data.frame(x=rep(time.points,2),y=c(ip.covid19,ip.fluA), Disease=c(rep("COVID-19",length(time.points)),rep("FLU-A",length(time.points))), Quantity=rep("IncubationPeriod",length(time.points)*2) )
Inf.Measure<-data.frame(x=time.points,y=infM , Quantity=rep("InfectiousnessMeasure",length(time.points)))
dt<-data.frame(x=Inf.Measure$x, y=Inf.Measure$y, Quantity=c(as.character(Inf.Measure$Quantity)))
pt<-data.frame(x=c(1,2,3), y=c(0.25,0.5,0.25), path=c("XB","XS","XA"))
pt$path<-factor(pt$path,levels = c("XB","XS","XA"))
a1<-ggplot(dt, aes(x=x, y=y))+geom_line(data = Inf.Measure, aes(x=x, y=y),lwd=0.5,lty=1)+
theme_minimal()+theme(
legend.key.size = unit(0.8, "cm"),
legend.key.width = unit(0.8,"cm"),
legend.title = element_text(size=17, face = "bold"),
legend.text = element_text(size=15),
axis.text.x = element_text(size=16),
axis.title = element_text(size=20),
axis.text.y = element_text(size=16),
text = element_text(size=20, face = "bold"),
) + xlab("Days")+ylab("Infectiousness Measure")+scale_color_brewer(palette = "Dark2")+ylim(c(0,0.6))+geom_point(data=pt,aes(x=x,y=y,color=path),shape=4,size=5,stroke=1.1)+labs(color="Pathogen:")
plot(a1)
time.points1<-seq(0,15,0.1)
time.points2<-seq(0,8,0.1)
#ip.covid19<-dlnorm(time.points,meanlog = log(5.2),sdlog = log(1.7))
#ip.fluA<-dlnorm(time.points,meanlog = log(1.4),sdlog = log(1.51))
#ip.rsv<-dlnorm(time.points,meanlog = log(4.4),sdlog = log(1.24))
inf.covid19<-dgamma(time.points1,shape = 12, rate = 2.08)/ (pgamma(15,shape = 2,rate = 2.08))
inf.fluA<-1.003767 *dgamma(time.points2,shape = 4.110963,scale = 0.6931173)
#Inc.Periods<-data.frame(x=rep(time.points,2),y=c(ip.covid19,ip.fluA), Disease=c(rep("COVID-19",length(time.points)),rep("FLU-A",length(time.points))), Quantity=rep("IncubationPeriod",length(time.points)*2) )
Inf.Measure<-data.frame(x=c(time.points1,time.points2),y=c(inf.covid19,inf.fluA) , Disease=c(rep("COVID-19",length(time.points1)),rep("FLU-A",length(time.points2))), Quantity=rep("InfectiousnessMeasure",length(time.points1)+length(time.points2)))
dt<-data.frame(x=Inf.Measure$x, y=Inf.Measure$y,Disease=c(as.character(Inf.Measure$Disease)), Quantity=c(as.character(Inf.Measure$Quantity)))
pt<-data.frame(x=c(0,0), y=c(0,0), Quantity=c("InfectiousnessMeasure"))
a2<-ggplot(dt, aes(x=x, y=y))+geom_line(data = Inf.Measure, aes(x=x, y=y, col=Disease),lwd=1.3,lty=1)+
theme_minimal()+theme(
legend.key.size = unit(0.8, "cm"),
legend.key.width = unit(0.8,"cm"),
legend.title = element_text(size=17, face = "bold"),
legend.text = element_text(size=16),
axis.text.x = element_text(size=16),
axis.title = element_text(size=20),
axis.text.y = element_text(size=16),
text = element_text(size=20, face = "bold"),
) + xlab("Days")+ylab("Infectiousness Measure")+scale_color_manual(values=c("#FFDB6D","#00AFBB"))+geom_vline(xintercept = 11/2.08,colour="#FFDB6D",lty=2,lwd=0.8)+geom_vline(xintercept = 2,colour="#00AFBB",lty=2,lwd=0.8)+ylim(c(0,0.4))
plot(a2)
inf.fluA<-1.003767 *dgamma(time.points2,shape = 4.110963,scale = 0.6931173)
#Inc.Periods<-data.frame(x=rep(time.points,2),y=c(ip.covid19,ip.fluA), Disease=c(rep("COVID-19",length(time.points)),rep("FLU-A",length(time.points))), Quantity=rep("IncubationPeriod",length(time.points)*2) )
Inf.Measure<-data.frame(x=c(time.points1,time.points2),y=c(inf.covid19,inf.fluA) , Disease=c(rep("COVID-19",length(time.points1)),rep("FLU-A",length(time.points2))), Quantity=rep("InfectiousnessMeasure",length(time.points1)+length(time.points2)))
dt<-data.frame(x=Inf.Measure$x, y=Inf.Measure$y,Disease=c(as.character(Inf.Measure$Disease)), Quantity=c(as.character(Inf.Measure$Quantity)))
pt<-data.frame(x=c(0,0), y=c(0,0), Quantity=c("InfectiousnessMeasure"))
a2<-ggplot(dt, aes(x=x, y=y))+geom_line(data = Inf.Measure, aes(x=x, y=y, col=Disease),lwd=1.3,lty=1)+
theme_minimal()+theme(
legend.key.size = unit(0.8, "cm"),
legend.key.width = unit(0.8,"cm"),
legend.title = element_text(size=17, face = "bold"),
legend.text = element_text(size=16),
axis.text.x = element_text(size=16),
axis.title = element_text(size=20),
axis.text.y = element_text(size=16),
text = element_text(size=20, face = "bold"),
) + xlab("Days")+ylab("Infectiousness Measure")+scale_color_manual(values=c("#FFDB6D","#00AFBB"))+geom_vline(xintercept = 11/2.08,colour="#FFDB6D",lty=2,lwd=0.8)+geom_vline(xintercept = 2,colour="#00AFBB",lty=2,lwd=0.8)+ylim(c(0,0.4))
plot(a2)
# Setting infectiousness measure according to Carrat et al. (2008) for H1N1
VL<-data.frame(x=0:8,y=c(0,1.75,3,2.5,1.8,1.25,0.75,0.5,0))
vl.flu<-nlsLM(y~a*dgamma(x=x,shape = s1,scale = sc1),start = list(a=10,s1=1.5,sc1=1.5),data = VL, weights = c(0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,20))
prms<-vl.flu$m$getPars()
print(prms)
plot(seq(0,8,0.1),prms[1]*dgamma(x=seq(0,8,0.1),shape = prms[2],scale = prms[3]),ylim = c(0,3.1))
points(VL, col="red")
f.vl<-function(t){
return(prms[1]*dgamma(t,shape = prms[2],scale = prms[3]))
}
k<-integrate(f.vl,lower = 0,upper = 8)
vl.flu<-nlsLM(y~a*dgamma(x=x,shape = s1,scale = sc1),start = list(a=10,s1=1.5,sc1=1.5),data = VL, weights = c(0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,50))
prms<-vl.flu$m$getPars()
print(prms)
plot(seq(0,8,0.1),prms[1]*dgamma(x=seq(0,8,0.1),shape = prms[2],scale = prms[3]),ylim = c(0,3.1))
points(VL, col="red")
vl.flu<-nlsLM(y~a*dgamma(x=x,shape = s1,scale = sc1),start = list(a=10,s1=1.5,sc1=1.5),data = VL, weights = c(0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,100))
prms<-vl.flu$m$getPars()
print(prms)
plot(seq(0,8,0.1),prms[1]*dgamma(x=seq(0,8,0.1),shape = prms[2],scale = prms[3]),ylim = c(0,3.1))
points(VL, col="red")
f.vl<-function(t){
return(prms[1]*dgamma(t,shape = prms[2],scale = prms[3]))
}
k<-integrate(f.vl,lower = 0,upper = 8)
prms[1]/ k$value
prms[2]
prms[3]
inf.fluA<-1.001592 *dgamma(time.points2,shape = 4.604016,scale = 0.5922317)
#Inc.Periods<-data.frame(x=rep(time.points,2),y=c(ip.covid19,ip.fluA), Disease=c(rep("COVID-19",length(time.points)),rep("FLU-A",length(time.points))), Quantity=rep("IncubationPeriod",length(time.points)*2) )
Inf.Measure<-data.frame(x=c(time.points1,time.points2),y=c(inf.covid19,inf.fluA) , Disease=c(rep("COVID-19",length(time.points1)),rep("FLU-A",length(time.points2))), Quantity=rep("InfectiousnessMeasure",length(time.points1)+length(time.points2)))
dt<-data.frame(x=Inf.Measure$x, y=Inf.Measure$y,Disease=c(as.character(Inf.Measure$Disease)), Quantity=c(as.character(Inf.Measure$Quantity)))
pt<-data.frame(x=c(0,0), y=c(0,0), Quantity=c("InfectiousnessMeasure"))
a2<-ggplot(dt, aes(x=x, y=y))+geom_line(data = Inf.Measure, aes(x=x, y=y, col=Disease),lwd=1.3,lty=1)+
theme_minimal()+theme(
legend.key.size = unit(0.8, "cm"),
legend.key.width = unit(0.8,"cm"),
legend.title = element_text(size=17, face = "bold"),
legend.text = element_text(size=16),
axis.text.x = element_text(size=16),
axis.title = element_text(size=20),
axis.text.y = element_text(size=16),
text = element_text(size=20, face = "bold"),
) + xlab("Days")+ylab("Infectiousness Measure")+scale_color_manual(values=c("#FFDB6D","#00AFBB"))+geom_vline(xintercept = 11/2.08,colour="#FFDB6D",lty=2,lwd=0.8)+geom_vline(xintercept = 2,colour="#00AFBB",lty=2,lwd=0.8)+ylim(c(0,0.4))
plot(a2)
ggarrange(a1,a2, labels = c("A","B"), nrow = 2)
prms[1]/ k$value
prms[2]
prms[3]
LLImmlev.basic<-function(status.matrix.v2,infectee,lli,current.time,typeIC,t.imm.lim){ #pathogen.v1 is the infection the infectee might catch
value<-1
if (status.matrix.v2$infected[infectee]==-1){
t.sinc.inf<-current.time-status.matrix.v2$time.of.infection[infectee]
if (t.sinc.inf<t.imm.lim){
if (typeIC==1){
value<-lli
}
if (typeIC==2){
value<-1-(t.sinc.inf/t.imm.lim)
}
if (typeIC==3){
value<-0.75-(t.sinc.inf/(2*t.imm.lim))
}
}
value<-lli
}
return(value)
}
t.sinc.inf<-current.time-status.matrix.v2$time.of.infection[infectee]
if (t.sinc.inf<t.imm.lim){
if (typeIC==1){
value<-lli
}
if (typeIC==2){
value<-1-(t.sinc.inf/t.imm.lim)
}
if (typeIC==3){
value<-0.75-(t.sinc.inf/(2*t.imm.lim))
}
}
s<-function(t){
return(1.001592*dgamma(t,shape = 4.604016,scale = 0.5922317))
}
integrate(s,lower = 0,upper = 2)
matrix(c(1,1,0,0,1,0,1,0,1,0,0,1,1,0,0,1))
a<-matrix(c(1,1,0,0,1,0,1,0,1,0,0,1,1,0,0,1), nrow = 4)
a
a<-matrix(c(1,1,1,1,1,0,0,0,0,1,0,0,0,1,0,0), nrow = 4)
a
eigen(a)
eigen(a)[1]
a*1/6
eigen(a*1/6)[1]
eigen(a*1/6)[[1]]
eigen(a*1/6)1/6
1/6
eigen(a*5/6)
Re(eigen(a*5/6)$values[1])
a
1*1/6
Re(eigen(a*5/6)$values[1])
Re(eigen(a*3/4)$values[1])
a
a<-matrix(c(1,1,1,1,1,0,0,0,0,1,0,0,0,0,1,1), nrow = 4)
Re(eigen(a*5/6)$values[1])
a
Re(eigen(a*5/6)$values[1])
a*5/6
eigen(a*5/6)$values[1]
g<-function(t){
return(0.75-(t.sinc.inf/(2*t.imm.lim)))
}
g<-function(t,a){
return(0.75-(t/(2*a)))
}
t<-seq(0,30,0.1)
plot(t,g(t,30))
plot(t,g(t,30), ylim = c(0,1))
plot(t,g(t,60), ylim = c(0,1))
g<-function(t,a){
return(1-(t/(2*a)))
}
plot(t,g(t,30), ylim = c(0,1))
g<-function(t,a){
return(1-(t/a)))
g<-function(t,a){
return(1-(t/a))
}
plot(t,g(t,a))
plot(t,g(t,30))
t<-seq(0,60,1)
plot(t,g(t,a))
plot(t,g(t,60))
setwd("~/Library/CloudStorage/GoogleDrive-andrea.torneri@uhasselt.be/My Drive/Work/PhD/Co-infection/Multi-phatogen")
load("~/Library/CloudStorage/GoogleDrive-andrea.torneri@uhasselt.be/My Drive/Work/PhD/Co-infection/Multi-phatogen/HH_Networks_nVertex2500_nNetw100.RData")
a<-HH.networks[[1]]
a
library(network)
a
a.size<- a %v% "hh_size"
a.size
hist
a.id<- a %v% "hh_id"
length(which(a.size==2))/2
length(which(a.size==3))/3
length(which(a.size==4))/4
length(which(a.size==5))/5
length(which(a.size==6))/6
length(which(a.size==7))/7
length(which(a.size==1))/1
363+359+153+151+50+12+5
length(unique(a.id))
HH.network<-HH.networks[[1]]
n<-network.size(HH.network)
hh.id<- HH.network %v% "hh_id"
hh.size<- HH.network %v% "hh_size"
status.matrix.1<- data.frame(infected          = rep(0,n),  # 1
time.of.infection  = NA,        # 2
infector           = NA,        # 3
severity           = 0,         # 4 1 Symptomatic 2 Asymptomatic
TimeSymptomOnset   = Inf,       # 5
Immunity           = 0,         # 0 no immunity, 1 vaccinated
Recovery           = Inf)
status.matrix.2 <-status.matrix.1
recovery.vector.1<-rep(Inf,n) #vector giving the recovery times
recovery.vector.2<-rep(Inf,n) #vector giving the recovery times
events<-data.frame("NextCtc"=Inf, "HomeQuarantine"=Inf, "Recovery"=Inf, "NewPathogen"=Inf, "NewSeeding1"=Inf, "NewSeeding2"=Inf )
events$NewPathogen<-t2
events$NewSeeding1<-t.seed
events$NewSeeding2<-t2+t.seed
infectives<-rep(0,n) # vector that indicates who is infectious at the current time: 1 infectious 0 non infectious
current.time<-0
index.contact.within<-rep(0,n) # vector that selects the individuals that have to propose a new social contact(global) - 1 yes 0 no
index.contact.between<-rep(0,n) # vector that selects the individuals that have to propose a new social contact(global) - 1 yes 0 no
time.events<-matrix(NA,1,3)
#transmission parameter dataframe: each line is an individual, the first colum is the transmsission coeffficient and the third the length of IP (needed to re-scale Viral load curve)
transmission.parameters<-data.frame("id"=1:n,"q1h"=rep(NA,n),"q1g"=rep(NA,n),"q2h"=rep(NA,n),"q2g"=rep(NA,n), "contact_rate_within"=rep(NA,n),"contact_rate_between"=lambda.g, "susceptibility"=rep(1,n))   #matrix containing the proposed time of the next contact (first colum) and the contact individual (second column)
for (j in 1:n){
transmission.parameters$contact_rate_within[j]<-length(get.neighborhood(HH.network,j))
}
#Proportion of immune
if (prop.immune>0){
if (pathogen.1=="DELTA" & pathogen.2=="OMICRON"){
immuned.individuals<-sample(1:n,round(prop.immune*n))
status.matrix.1$Immunity[immuned.individuals]<-1
status.matrix.2$Immunity<-status.matrix.1$Immunity
}else{
immuned.individuals<-sample(1:n,round(prop.immune*n))
status.matrix.1$Immunity[immuned.individuals]<-1
immuned.individuals<-sample(1:n,round(prop.immune*n))
status.matrix.2$Immunity[immuned.individuals]<-1
}
}
homequarantine.day.1<-rep(Inf,n)
homequarantine.day.2<-rep(Inf,n)
homequarantine<-rep(0,n)
stop.quarantine<-rep(Inf,n)
contact.time.within<-data.frame("id"=1:n,"pr.ctc"=rep(NA,n),"pr.infectee"=rep(NA,n))   #matrix containing the proposed time of the next contact (first colum) and the contact individual (second column)
contact.time.between<-data.frame("id"=1:n,"pr.ctc"=rep(NA,n),"pr.infectee"=rep(NA,n))   #matrix containing the proposed time of the next contact (first colum) and the contact individual (second column)
# first infected: randomly chosen in the population (among the susceptibles)
potential.seeds<-which(hh.size==2)
potential.seeds
length(potential.seeds)/2
length(potential.seeds)
first.cases<-sample(which(status.matrix.1[potential.seeds,1]==0),nSeeds.1)
nSeeds.1<-1
nSeeds.1<-3
first.cases<-sample(which(status.matrix.1[potential.seeds,1]==0),nSeeds.1)
first.cases
get.neighborhood(HH.network,339)
get.neighborhood(a,339)
potential.seeds
which(status.matrix.1[potential.seeds,1]==0)
# first infected: randomly chosen in the population (among the susceptibles)
potential.seeds<-which(hh.size==2)
first.cases<-sample(potential.seeds[which(status.matrix.1[potential.seeds,1]==0)],nSeeds.1)
first.cases
get.neighborhood(HH.network,962)
get.neighborhood(HH.network,535)
get.neighborhood(HH.network,434)
