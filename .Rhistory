if (next.evts=="NextCtc"){
current.time<-events$NextCtc
if (length(min(contact.time.overall, na.rm = T))>1){ #when two contacts happen at the same time
selected.ctc<-sample(which(contact.time.overall==current.time),1)
if (selected.ctc!=n & selected.ctc!=2*n){
infector<- selected.ctc %% n
}else{
infector<- n
}
if (selected.ctc<=n){
infectee.pool<-get.neighborhood(HH.network,infector)
if (length(infectee.pool)>1){
infectee<-sample(infectee.pool,1) #pick a random individual in the class
}
if(length(infectee.pool)==1){
infectee<-infectee.pool #pick a random individual in the class
}
if(length(infectee.pool)==0){
infectee<-infector #just a trick to have acceptance rate 0 (infector is not susceptible)
}
index.contact.within[infector]<-1
contact.time.within$pr.ctc[infector]<-NA
ctc<-"hh"
}else{
infector<-which(contact.time.between$pr.ctc == events$NextCtc)
hh.members.temp<-which(hh.id==hh.id[infector])
infectee.pool<- setdiff(1:n,hh.members.temp) #individuals not in the same class
infectee<-sample(infectee.pool,1) #pick a random individual not in the class (and not a teacher)
index.contact.between[infector]<-1
contact.time.between$pr.ctc[infector]<-NA
ctc<-"g"
}
}else{
if (length(which(events$NextCtc==contact.time.within$pr.ctc))>0){ #if it is a within contact
infector<-which(contact.time.within$pr.ctc ==events$NextCtc)
infectee.pool<-get.neighborhood(HH.network,infector)
if (length(infectee.pool)>1){
infectee<-sample(infectee.pool,1) #pick a random individual in the class
}
if(length(infectee.pool)==1){
infectee<-infectee.pool #pick a random individual in the class
}
if(length(infectee.pool)==0){
infectee<-infector #just a trick to have acceptance rate 0 (infector is not susceptible)
}
index.contact.within[infector]<-1
contact.time.within$pr.ctc[infector]<-NA
ctc<-"hh"
}else{
infector<-which(contact.time.between$pr.ctc == events$NextCtc)
hh.members.temp<-which(hh.id==hh.id[infector])
infectee.pool<- setdiff(1:n,hh.members.temp) #individuals not in the same class
infectee<-sample(infectee.pool,1) #pick a random individual not in the class (and not a teacher)
index.contact.between[infector]<-1
contact.time.between$pr.ctc[infector]<-NA
ctc<-"g"
}
}
# compute the long and short interaction terms for pathogen.1
if (status.matrix.2[infectee,1]==1){
short.inter<-sigma12
}else{
short.inter<-1
}
if (status.matrix.2[infectee,1]<0){
long.inter<-long.inter.term.2(t=status.matrix.2$Recovery[infectee],inf.type=status.matrix.2$infected[infectee], lli = lli.2)
}else{
long.inter<-1
}
ifelse(ctc=="g",q<-transmission.parameters$q1g[infector],q<-transmission.parameters$q1h[infector])
acc.rate.1<-InfMeasure(t= current.time- status.matrix.1$time.of.infection[infector] ,pathogen = pathogen.1)*short.inter*long.inter*q
if ((ctc=="g" & homequarantine[infectee]==1) | status.matrix.1$infected[infector]!=1){acc.rate.1<-0}
if (acc.rate.1>1){err<-err+1}
if (status.matrix.1$infected[infectee]==0 & runif(1)<acc.rate.1){
status.matrix.1$infected[infectee] <- 1
status.matrix.1$time.of.infection[infectee] <- current.time
status.matrix.1$infector[infectee] <- infector
status.matrix.1$Recovery[infectee]<-current.time+infectious.period.length(pathogen=pathogen.1)
if (runif(1)<rho.1){ #if symptomatic
transmission.parameters$q1h[infectee]<-inf.path.1.h #A single q parameter for everyone
transmission.parameters$q1g[infectee]<-inf.path.1.g #A single q parameter for everyone
status.matrix.1$TimeSymptomOnset[infectee]<-current.time+incubation.period(pathogen=pathogen.1)
homequarantine.day.1[infectee]<-status.matrix.1$TimeSymptomOnset[infectee]
status.matrix.1$severity[infectee]<-1
time.events<-rbind(time.events,c(current.time,1.1,infectee))
}else{
transmission.parameters$q1g[infectee]<-inf.path.1.g*alpha.as.1 #A single q parameter for everyone
transmission.parameters$q1h[infectee]<-inf.path.1.h*alpha.as.1 #A single q parameter for everyone
status.matrix.1$severity[infectee]<-2
time.events<-rbind(time.events,c(current.time,1.2,infectee))
}
if (infectives[infectee]==0){
infectives[infectee]<-1
contact.time.within$pr.ctc[infectee]<-ifelse(transmission.parameters$contact_rate_within[infectee]!=0,rexp(1,transmission.parameters$contact_rate_within[infectee])+current.time,Inf)       # I generate the next interarrival time for individual i
if (homequarantine[infectee]==0){
contact.time.between$pr.ctc[infectee]<-rexp(1,transmission.parameters$contact_rate_between[infectee])+current.time # I generate the next interarrival time for individual i
}
}
}
# compute the long and short interaction terms for pathogen.2
if (status.matrix.1$infected[infectee]==1){
short.inter<-sigma21
}else{
short.inter<-1
}
if (status.matrix.1$infected[infectee]<0){
long.inter<-long.inter.term.1(t=status.matrix.1$Recovery[infectee],inf.type=status.matrix.1$infected[infectee],lli = lli.1)
}else{
long.inter<-1
}
ifelse(ctc=="g",q<-transmission.parameters$q2g[infector],q<-transmission.parameters$q2h[infector])
acc.rate.2<-InfMeasure(t=(current.time-status.matrix.2$time.of.infection[infector]),pathogen = pathogen.2)*short.inter*long.inter*q
if ((ctc=="g" & homequarantine[infectee]==1) | status.matrix.2$infected[infector]!=1){acc.rate.2<-0}
if (acc.rate.2>1){err<-err+1}
if (status.matrix.2$infected[infectee]==0 & runif(1)<acc.rate.2){
status.matrix.2$infected[infectee] <- 1
status.matrix.2$time.of.infection[infectee] <- current.time
status.matrix.2$infector[infectee] <- infector
status.matrix.2$Recovery[infectee]<-current.time+infectious.period.length(pathogen=pathogen.2)
if (runif(1)<rho.2){ #if symptomatic
transmission.parameters$q2h[infectee]<-inf.path.2.h #A single q parameter for everyone
transmission.parameters$q2g[infectee]<-inf.path.2.g #A single q parameter for everyone
status.matrix.2$TimeSymptomOnset[infectee]<-current.time+incubation.period(pathogen=pathogen.2)
homequarantine.day.2[infectee]<-status.matrix.2$TimeSymptomOnset[infectee]
status.matrix.2$severity[infectee]<-1
time.events<-rbind(time.events,c(current.time,2.1,infectee))
}else{
transmission.parameters$q2g[infectee]<-inf.path.2.g*alpha.as.2 #A single q parameter for everyone
transmission.parameters$q2h[infectee]<-inf.path.2.h*alpha.as.2 #A single q parameter for everyone
status.matrix.2$severity[infectee]<-2
time.events<-rbind(time.events,c(current.time,2.2,infectee))
}
if (infectives[infectee]==0){
infectives[infectee]<-1
contact.time.within$pr.ctc[infectee]<-ifelse(transmission.parameters$contact_rate_within[infectee]!=0,rexp(1,transmission.parameters$contact_rate_within[infectee])+current.time,Inf)       # I generate the next interarrival time for individual i
if (homequarantine[infectee]==0){
contact.time.between$pr.ctc[infectee]<-rexp(1,transmission.parameters$contact_rate_between[infectee])+current.time # I generate the next interarrival time for individual i
}
}
}
}
if (next.evts=="HomeQuarantine"){
current.time<-events$HomeQuarantine
quarantined.individuals<-which(homequarantine.day.overall==current.time)
for (k in quarantined.individuals){
if (k != n & k!= 2*n) {
temp.ind<- k %% n
}else{
temp.ind<-n
}
if (k>n){
homequarantine.day.2[temp.ind]<-Inf
stop.quarantine[temp.ind]<-status.matrix.2$Recovery[temp.ind]
}else{
homequarantine.day.1[temp.ind]<-Inf
stop.quarantine[temp.ind]<-status.matrix.1$Recovery[temp.ind]
}
if (homequarantine[temp.ind]==1){ #individual is already in quarantine for the other disease
stop.quarantine[temp.ind]<-max(status.matrix.2$Recovery[temp.ind],status.matrix.1$Recovery[temp.ind])
}
homequarantine[temp.ind]<-1
contact.time.between$pr.ctc[temp.ind]<-NA
index.contact.between[temp.ind]<-0
transmission.parameters$contact_rate_within[temp.ind]<-transmission.parameters$contact_rate_within[temp.ind]*contact.reduction
}
}
if (next.evts=="Recovery"){
current.time<-events$Recovery
temp.recovered<-which(recovery.vector.overall==events$Recovery)
for (recovered in temp.recovered){
if (recovered!= n & recovered!=n*2){
if (recovered > n){
recovered<- recovered %% n
status.matrix.2$infected[recovered]<--1
status.matrix.2$Recovery[recovered]<-Inf
time.events<-rbind(time.events,c(current.time,-2,recovered))
if (status.matrix.1$infected[recovered]!=1){
infectives[recovered]<-0
contact.time.between$pr.ctc[recovered]<-NA
contact.time.within$pr.ctc[recovered]<-NA
index.contact.within[recovered]<-0
index.contact.between[recovered]<-0
}else{
if (homequarantine[recovered]==0){
index.contact.between[recovered]<-1
}
}
}else{
status.matrix.1$infected[recovered]<--1
status.matrix.1$Recovery[recovered]<-Inf
time.events<-rbind(time.events,c(current.time,-1,recovered))
if (status.matrix.2$infected[recovered]!=1){
infectives[recovered]<-0
contact.time.between$pr.ctc[recovered]<-NA
contact.time.within$pr.ctc[recovered]<-NA
index.contact.within[recovered]<-0
index.contact.between[recovered]<-0
}else{
if (homequarantine[recovered]==0){
index.contact.between[recovered]<-1
}
}
}
}else{
if (recovered == 2*n){
recovered<- n
status.matrix.2$infected[recovered]<--1
status.matrix.2$Recovery[recovered]<-Inf
time.events<-rbind(time.events,c(current.time,-2,recovered))
if (status.matrix.1$infected[recovered]!=1){
infectives[recovered]<-0
contact.time.between$pr.ctc[recovered]<-NA
contact.time.within$pr.ctc[recovered]<-NA
index.contact.within[recovered]<-0
index.contact.between[recovered]<-0
}else{
if (homequarantine[recovered]==0){
index.contact.between[recovered]<-1
}
}
}else{
status.matrix.1$infected[recovered]<--1
status.matrix.1$Recovery[recovered]<-Inf
time.events<-rbind(time.events,c(current.time,-1,recovered))
if (status.matrix.2$infected[recovered]!=1){
infectives[recovered]<-0
contact.time.between$pr.ctc[recovered]<-NA
contact.time.within$pr.ctc[recovered]<-NA
index.contact.within[recovered]<-0
index.contact.between[recovered]<-0
}else{
if (homequarantine[recovered]==0){
index.contact.between[recovered]<-1
}
}
}
}
if (stop.quarantine[recovered]==current.time){
homequarantine[recovered]<-0
stop.quarantine[recovered]<-Inf
}
}
}
if (next.evts=="NewPathogen"){
current.time<-events$NewPathogen
events$NewPathogen<-Inf
first.cases<-sample(1:n,nSeeds.2)
for (j in first.cases){
first<-j
status.matrix.2$infected[first] <- 1
status.matrix.2$time.of.infection[first] <- current.time
status.matrix.2$Recovery[first]<-current.time+infectious.period.length(pathogen=pathogen.2)
if (runif(1)<rho.2){ #if symptomatic
transmission.parameters$q2h[first]<-inf.path.2.h #A single q parameter for everyone
transmission.parameters$q2g[first]<-inf.path.2.g #A single q parameter for everyone
status.matrix.2$severity[first]<-1
status.matrix.2$TimeSymptomOnset[first]<-current.time+incubation.period(pathogen=pathogen.2)
homequarantine.day.2[first]<-status.matrix.2$TimeSymptomOnset[first]
time.events<-rbind(time.events,c(current.time,2.1,first))
}else{
transmission.parameters$q2h[first]<-inf.path.2.h*alpha.as.1 #A single q parameter for everyone
transmission.parameters$q2g[first]<-inf.path.2.g*alpha.as.1 #A single q parameter for everyone
status.matrix.2$severity[first]<-2
time.events<-rbind(time.events,c(current.time,2.2,first))
}
if (infectives[first]==0){
infectives[first]<-1
contact.time.within$pr.ctc[first]<-ifelse(transmission.parameters$contact_rate_within[first]!=0,rexp(1,transmission.parameters$contact_rate_within[first])+current.time,Inf)       # I generate the next interarrival time for individual i
if (homequarantine[first]==0){
contact.time.between$pr.ctc[first]<-rexp(1,transmission.parameters$contact_rate_between[first])+current.time # I generate the next interarrival time for individual i
}
}
}
}
}
time.events<-time.events[-1,]
timev.name<-c("time","event","who")
dimnames(time.events)<-list(NULL,timev.name)
first.cases.1<-which(status.matrix.1$time.of.infection==0)
for (o in first.cases.1){
temp.sec.cases<-NULL
ifelse(length(which(status.matrix.1$infector ==o)>0),temp.sec.cases<-c(temp.sec.cases,length(which(status.matrix.1$infector==o))),temp.sec.cases<-c(temp.sec.cases,0))
}
Rt1<-mean(temp.sec.cases)
first.cases.2<-which(status.matrix.2$time.of.infection==0)
for (o in first.cases.2){
temp.sec.cases<-NULL
ifelse(length(which(status.matrix.2$infector==o)>0),temp.sec.cases<-c(temp.sec.cases,length(which(status.matrix.2$infector==o))),temp.sec.cases<-c(temp.sec.cases,0))
}
Rt2<-mean(temp.sec.cases)
C1<-nSeeds.1
C2<-nSeeds.2
Y1<-nSeeds.1
Y2<-nSeeds.2
last.day<-round(max(time.events[,1]))
for (i in 1:last.day){
temp.time<-setdiff(which(time.events[,1]>i),which(time.events[,1]>i+1))
temp.inf.1<-c(which(time.events[temp.time,2]==1.1),which(time.events[temp.time,2]==1.2))
temp.inf.2<-c(which(time.events[temp.time,2]==2.1),which(time.events[temp.time,2]==2.2))
temp.time.1<-setdiff(1:length(time.events[,1]),which(time.events[,1]>i+1))
C1<- c(C1,length((which(time.events[temp.time.1,2]==1.1)))+length((which(time.events[temp.time.1,2]==1.2)))-length((which(time.events[temp.time.1,2]==-1))))
C2<- c(C2,length((which(time.events[temp.time.1,2]==2.1)))+length((which(time.events[temp.time.1,2]==2.2)))-length((which(time.events[temp.time.1,2]==-2))))
Y1<- c(Y1,length(temp.inf.1))
Y2<-c(Y2,length(temp.inf.2))
if (length(temp.inf.1)>0){
newly.infected<-time.events[temp.time[temp.inf.1],3]
temp.sec.cases<-NULL
for (k in newly.infected) {
ifelse(length(which(status.matrix.1$infector==k)>0),temp.sec.cases<-c(temp.sec.cases,length(which(status.matrix.1$infector==k))),temp.sec.cases<-c(temp.sec.cases,0))
}
Rt1<-c(Rt1,mean(temp.sec.cases))
}else{
Rt1<-c(Rt1,NA)
}
if (length(temp.inf.2)>0){
newly.infected<-time.events[temp.time[temp.inf.2],3]
temp.sec.cases<-NULL
for (k in newly.infected) {
ifelse(length(which(status.matrix.2$infector==k)>0),temp.sec.cases<-c(temp.sec.cases,length(which(status.matrix.2$infector==k))),temp.sec.cases<-c(temp.sec.cases,0))
}
Rt2<-c(Rt2,mean(temp.sec.cases))
}else{
Rt2<-c(Rt2,NA)
}
}
epi.details<-data.frame("Days"=0:last.day, "Incidence1"=Y1,"Incidence2"=Y2, "Prevalence1"=C1,"Prevalence2"=C2,"Rt1"=Rt1,"Rt2"=Rt2)
FinalSize<-data.frame("FinalSize1"=length(which(status.matrix.1$infected==-1)),"FinalSize2"=length(which(status.matrix.2$infected==-1)))
PeakIncidence<-data.frame("PeakIncidence1"=max(epi.details$Incidence1),"TimePeakIncidence1"=which(epi.details$Incidence1==max(epi.details$Incidence1))[1],"PeakIncidence2"=max(epi.details$Incidence2),"TimePeakIncidence2"=which(epi.details$Incidence2==max(epi.details$Incidence2))[1] )
PeakPrevalence<-data.frame("PeakPrevalence1"=max(epi.details$Prevalence1),"TimePeakPrevalence1"=which(epi.details$Prevalence1==max(epi.details$Prevalence1))[1],"PeakPrevalence2"=max(epi.details$Prevalence2),"TimePeakPrevalence2"=which(epi.details$Prevalence2==max(epi.details$Prevalence2))[1] )
epi.details$Days
epi.details
View(epi.details)
View(epi.details)
first.cases.1<-which(status.matrix.1$time.of.infection==0)
for (o in first.cases.1){
temp.sec.cases<-NULL
ifelse(length(which(status.matrix.1$infector ==o)>0),temp.sec.cases<-c(temp.sec.cases,length(which(status.matrix.1$infector==o))),temp.sec.cases<-c(temp.sec.cases,0))
}
Rt1<-NULL
first.cases.1<-which(status.matrix.1$time.of.infection==0)
for (o in first.cases.1){
temp.sec.cases<-NULL
ifelse(length(which(status.matrix.1$infector ==o)>0),temp.sec.cases<-c(temp.sec.cases,length(which(status.matrix.1$infector==o))),temp.sec.cases<-c(temp.sec.cases,0))
}
Rt1<-mean(temp.sec.cases)
first.cases.1<-which(status.matrix.1$time.of.infection==0)
temp.sec.cases<-NULL
length(which(status.matrix.1$infector ==o)>0)
length(which(status.matrix.1$infector ==o)
length(which(status.matrix.1$infector ==o))
length(which(status.matrix.1$infector ==o))
which(status.matrix.1$infector ==o)
first.cases.1<-which(status.matrix.1$time.of.infection==0)
first.cases.1<-which(status.matrix.1$time.of.infection==0)
temp.sec.cases<-NULL
for (o in first.cases.1){
ifelse(length(which(status.matrix.1$infector==0))>0, temp.sec.cases<-c(temp.sec.cases,length(which(status.matrix.1$infector==o))),temp.sec.cases<-c(temp.sec.cases,0))
}
Rt1<-mean(temp.sec.cases)
temp.sec.cases
first.cases.1<-which(status.matrix.1$time.of.infection==0)
temp.sec.cases<-NULL
first.cases.1
0<-36
o<-36
first.cases.1<-which(status.matrix.1$time.of.infection==0)
temp.sec.cases<-NULL
for (o in first.cases.1){
ifelse(length(which(status.matrix.1$infector==o))>0, temp.sec.cases<-c(temp.sec.cases,length(which(status.matrix.1$infector==o))),temp.sec.cases<-c(temp.sec.cases,0))
}
Rt1<-mean(temp.sec.cases)
which(status.matrix.1$infector==first.cases.1[1])
which(status.matrix.1$infector==first.cases.1[2])
which(status.matrix.1$infector==first.cases.1[3])
which(status.matrix.1$infector==first.cases.1[4])
which(status.matrix.1$infector==first.cases.1[5])
which(status.matrix.1$infector==first.cases.1[6])
which(status.matrix.1$infector==first.cases.1[7])
which(status.matrix.1$infector==first.cases.1[8])
which(status.matrix.1$infector==first.cases.1[9])
which(status.matrix.1$infector==first.cases.1[10])
time.events
status.matrix.1[35,]
status.matrix.1[458,]
status.matrix.1[607,]
status.matrix.1[579,]
status.matrix.1[582,]
first.cases.2<-which(status.matrix.2$time.of.infection==0)
temp.sec.cases<-NULL
for (o in first.cases.2){
ifelse(length(which(status.matrix.2$infector==o))>0, temp.sec.cases<-c(temp.sec.cases,length(which(status.matrix.2$infector==o))),temp.sec.cases<-c(temp.sec.cases,0))
}
Rt2<-mean(temp.sec.cases)
first.cases.2<-which(status.matrix.2$time.of.infection==0)
first.cases.2<-which(status.matrix.2$time.of.infection==t2)
temp.sec.cases<-NULL
for (o in first.cases.2){
ifelse(length(which(status.matrix.2$infector==o))>0, temp.sec.cases<-c(temp.sec.cases,length(which(status.matrix.2$infector==o))),temp.sec.cases<-c(temp.sec.cases,0))
}
Rt2<-mean(temp.sec.cases)
C1<-nSeeds.1
C2<-nSeeds.2
Y1<-nSeeds.1
Y2<-nSeeds.2
last.day<-round(max(time.events[,1]))
for (i in 1:last.day){
temp.time<-setdiff(which(time.events[,1]>i),which(time.events[,1]>i+1))
temp.inf.1<-c(which(time.events[temp.time,2]==1.1),which(time.events[temp.time,2]==1.2))
temp.inf.2<-c(which(time.events[temp.time,2]==2.1),which(time.events[temp.time,2]==2.2))
temp.time.1<-setdiff(1:length(time.events[,1]),which(time.events[,1]>i+1))
C1<- c(C1,length((which(time.events[temp.time.1,2]==1.1)))+length((which(time.events[temp.time.1,2]==1.2)))-length((which(time.events[temp.time.1,2]==-1))))
C2<- c(C2,length((which(time.events[temp.time.1,2]==2.1)))+length((which(time.events[temp.time.1,2]==2.2)))-length((which(time.events[temp.time.1,2]==-2))))
Y1<- c(Y1,length(temp.inf.1))
Y2<-c(Y2,length(temp.inf.2))
if (length(temp.inf.1)>0){
newly.infected<-time.events[temp.time[temp.inf.1],3]
temp.sec.cases<-NULL
for (k in newly.infected) {
ifelse(length(which(status.matrix.1$infector==k)>0),temp.sec.cases<-c(temp.sec.cases,length(which(status.matrix.1$infector==k))),temp.sec.cases<-c(temp.sec.cases,0))
}
Rt1<-c(Rt1,mean(temp.sec.cases))
}else{
Rt1<-c(Rt1,NA)
}
if (length(temp.inf.2)>0){
newly.infected<-time.events[temp.time[temp.inf.2],3]
temp.sec.cases<-NULL
for (k in newly.infected) {
ifelse(length(which(status.matrix.2$infector==k)>0),temp.sec.cases<-c(temp.sec.cases,length(which(status.matrix.2$infector==k))),temp.sec.cases<-c(temp.sec.cases,0))
}
Rt2<-c(Rt2,mean(temp.sec.cases))
}else{
Rt2<-c(Rt2,NA)
}
}
epi.details<-data.frame("Days"=0:last.day, "Incidence1"=Y1,"Incidence2"=Y2, "Prevalence1"=C1,"Prevalence2"=C2,"Rt1"=Rt1,"Rt2"=Rt2)
View(epi.details)
mean(c(2,2,2,2,2,2,3,3,3,3))
mean(c(8,9,6,6,6,7,7,9,6,7))
7.1-2.4
4.7*6
28.2*24
48*60/1000
t2<-0
sigma12<-1
sigma21<-1
prop.immune<-0
nSeeds.1<-10
nSeeds.2<-10
rho.1<-0.69
rho.2<-0.67
alpha.as.1<-0.5
alpha.as.2<-0.33
netw<-"Synth"
n.vertex<-2500
n.networks<-100
R.1<-8
R.2<-2
ratio.qhqg<-8.27
lli.1<-1
lli.2<-1
pathogen.1<-"COVID-19"
pathogen.2<-"FLU-A"
contact.reduction<-1
#Input parameters - fixed
library(ergm)
library(RGeode)
if (netw=="ERGM"){
load("sim_basis_complete_n_1000.RData")
HH.networks<-HH_sim
name.s<-paste("TransParam_ERGMNetworks_nVertex",n.vertex,"_nNetw",n.networks, "_R",R.1,"_ratioqhqg",ratio.qhqg, "_rho",rho.1,"_alpha",alpha.as.1,".RData",sep = "")
load(name.s)
inf.path.1.h<-inf.path.h
inf.path.1.g<-inf.path.g
name.s<-paste("TransParam_ERGMNetworks_nVertex","_nNetw",n.networks, "_R",R.2,"_ratioqhqg",ratio.qhqg, "_rho",rho.2,"_alpha",alpha.as.2,".RData",sep = "")
load(name.s)
inf.path.2.h<-inf.path.h
inf.path.2.g<-inf.path.g
}
if (netw=="Synth"){
name.n<-paste("HH_Networks","_nVertex",n.vertex,"_nNetw",n.networks,".RData",sep = "")
load(name.n)
name.s<-paste("TransParam_SynthNetworks_nVertex",n.vertex,"_nNetw",n.networks, "_R",R.1,"_ratioqhqg",ratio.qhqg, "_rho",rho.1,"_alpha",alpha.as.1,".RData",sep = "")
load(name.s)
inf.path.1.h<-inf.path.h
inf.path.1.g<-inf.path.g
name.s<-paste("TransParam_SynthNetworks_nVertex",n.vertex,"_nNetw",n.networks, "_R",R.2,"_ratioqhqg",ratio.qhqg, "_rho",rho.2,"_alpha",alpha.as.2,".RData",sep = "")
load(name.s)
inf.path.2.h<-inf.path.h
inf.path.2.g<-inf.path.g
}
#Mean number of daily contact at a global level (Using SOCRATES 15/02/2022 )
lambda.g<-8.29
#Compute the reproduction number related to the selected network.
source("function.multipathogen.new.R")
nSim<-10
epi.outbreak<-list()
nSeed<-1062021
set.seed(nSeed)
for (i in 1:nSim){
print(i)
temp.HH.netw<-HH.networks[[sample(1:length(HH.networks),1)]]
epi.outbreak[[i]]<-sim.multipathogen(HH.network = temp.HH.netw, t2=t2, lambda.g = lambda.g, sigma12 = sigma12, sigma21 = sigma21, prop.immune = prop.immune, nSeeds.1 = nSeeds.1, nSeeds.2 = nSeeds.2, rho.1 = rho.1, rho.2 = rho.2, inf.path.1.h = inf.path.1.h,inf.path.1.g = inf.path.1.g, inf.path.2.h = inf.path.2.h,inf.path.2.g = inf.path.2.g, alpha.as.1=alpha.as.1,alpha.as.2=alpha.as.2, lli.1=lli.1,lli.2=lli.2, pathogen.1=pathogen.1, pathogen.2=pathogen.2, contact.reduction=contact.reduction)
}
TP1<-NULL
for (i in 1:nSim){
TP1<-c(TP1,epi.outbreak[[i]]$PeakPrevalence$TimePeakPrevalence1)
}
boxplot(TP1)
mean(TP1)
2500*0.75
2500-1875
