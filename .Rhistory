dt.Fig1.CTR$RelInf<-factor(dt.Fig1.CTR$RelInf, levels = c("1","0.75","0.5","0.25","0"))
dt.Fig1.CTR$Rstar<-factor(dt.Fig1.CTR$Rstar, levels = c("0.95","1.05"))
ggplot(data = dt.Fig1.CTR, aes(x=RelInf, fill=Pathogen,y=FinalSize/2500))+geom_boxplot()+scale_fill_brewer(palette="Accent", labels=c("FLU-A","COVID-19","XS") )+stat_summary(fun.y=mean, geom="point", shape=15, size=3, color="royalblue", fill="black", aes(group=Pathogen),position=position_dodge(.75)) +theme(
panel.background = element_rect(fill = "white",
colour = "gray",
size = 0.75, linetype = "solid"),
panel.grid.major = element_line(size = 0.25, linetype = 'solid',
colour = "gray"),
panel.grid.minor = element_line(size = 0.5, linetype = 'solid',
colour = "white"),
legend.key.size = unit(1, "cm"),
legend.key.width = unit(1,"cm"),
legend.background = element_rect(fill = "white"),
legend.key = element_rect(fill = "white", color = NA),
legend.text = element_text(size=14),
legend.position = "top",
#legend.position = "top",
legend.title = element_text(size=15, face = "bold"),
axis.text.x = element_text(size=14, angle = 45, vjust = 0.5, hjust = 0.5),
axis.title = element_text(size=15),
axis.text.y = element_text(size=14),
strip.text = element_text(size = 15)
)+ylab(("Attack Rate"))+xlab("Contact reduction (within household)")+facet_wrap( ~ Rstar, scales = "fixed", labeller = label_both)+scale_x_discrete(labels=c("0","0.25","0.5","0.75","1"))+labs(fill="Pathogen:")
#Input Arguments
n<-1000                   # Population size
prop.immune <-0         # Proportion of immune individuals
#Input Arguments
n<-1000                   # Population size
prop.immune <-0         # Proportion of immune individuals
rho <-1                 # Probability of a symptomatic infection
q <-0.5                   # Transmission potential
#Input Arguments
n<-1000                   # Population size
prop.immune <-0         # Proportion of immune individuals
rho <-1                 # Probability of a symptomatic infection
q <-0.5                   # Transmission potential
alpha.as<- 1            # Relative infectiousness asymptomatic carriers
vacc.eff<- 0            # Vaccine effectiveness
testing.prob<-0           # Probability that a symptomatic individual is tested
test.sens<-0           # Sensitivity of the test
test.delay<-0             # Delay from taking the test to the test result
contact.reduction<-0    # Reduction of contact rate
nSeeds<-1                 # Number initial infected individuals
lambda<-3                 # Number of daily contacts
#running simulations
source("scrLeo.R")
setwd("~/Library/CloudStorage/GoogleDrive-andrea.torneri@uhasselt.be/My Drive/Work/PostDoc/Student/Leo/effective_contact_process")
#running simulations
source("scrLeo.R")
nSim<-10
set.seed(131714)
epi.outbreak<-list()
for (i in 1:nSim){
print(i)
epi.outbreak[[i]]<-sim.ekp(n=n,prop.immune = prop.immune,rho = rho,q=q,alpha.as = alpha.as,vacc.eff=vacc.eff,testing.prob = testing.prob,test.sens = test.sens,test.delay = test.delay,contact.reduction = contact.reduction,nSeeds = nSeeds, lambda = lambda)
}
R<-0.9
ratio.qhqg<-1
rho<-1
alpha<-0.3
pathogen<-"XS"
pathogen<-"FLU-A"
ctc.dec<-1
compl<-0
setwd("~/Library/CloudStorage/GoogleDrive-andrea.torneri@uhasselt.be/My Drive/Work/PhD/Co-infection/Multi-phatogen")
load("~/Library/CloudStorage/GoogleDrive-andrea.torneri@uhasselt.be/My Drive/Work/PhD/Co-infection/Multi-phatogen/HH_Networks_nVertex100_nNetw5.RData")
lambda.h<-3.34 #average number of daily within household (Mossong et al. 2008 - Belgium)
lambda.g<-8.29 #average number of daily contacts at a community level (Mossong et al. 2008 - Belgium)
library("network")
source("R_comp_netw.R")
ratio_hhgl<-lambda.h/lambda.g*ratio.qhqg
R.rif<-R
nSim<-100
tol<-0.01*R.rif #tolerance is 0.5% of the target value
nSeed<-3082021
set.seed(nSeed)
#trs.prms.1<-R0.comp.Inf.new(ratio_hhgl=ratio.qhqg, HH.network = HH.networks, nSim = nSim, tol=tol,R.rif = R.rif, prob.asym=(1-rho),asymp.rel.inf=alpha,lambda.g = lambda.g,pathogen=pathogen,ctc.dec=ctc.dec,compl=compl)
trs.prms.2<-R0.comp.Inf.bc(ratio_hhgl=ratio.qhqg, HH.network = HH.networks, nSim = nSim, tol=tol,R.rif = R.rif, prob.asym=(1-rho),asymp.rel.inf=alpha,lambda.g = lambda.g,pathogen=pathogen,ctc.dec=ctc.dec,compl=compl)
HH.network<-HH.networks[[1]]
mu<-infectious.period.length(pathogen = pathogen)
meanIP<-mean.ip(pathogen = pathogen)
beta.g<-q.g*lambda.g
hh.id<-HH.network %v% "hh_id"
q.g<-.2
hh.id<-HH.network %v% "hh_id"
hh.size<-HH.network %v% "hh_size"
beta.g<-q.g*lambda.g
hh.id<-HH.network %v% "hh_id"
hh.size<-HH.network %v% "hh_size"
n<-length(hh.id)
m<- length(unique(hh.id)) # number of households
m.n<-rep(0,max(unique(hh.size))) # number of household of a specific size (position 1 size 1, position 2 size 2, ....)
R0<-0
for (i in 1:length(m.n)){
m.n[i]<-length(unique(hh.id[which(hh.size==i)]))
}
h.n<-m.n/m #proportion of household of a specific size
mu.h<-sum(h.n*(1:length(h.n)))
AR<-list()
for (s in 1:max(unique(hh.size))) {
AR[[s]]<-0
}
unique(hh.id)
hh.id
which(hh.size[hh.id])
which(hh.size[hh.id]>1)
hh.size
length(which(hh.size[hh.id]>1))
unique(hh.id)
R0.computation.Inf.bc<-function(HH.network,q.g,nSim, q.h,prob.asym,asymp.rel.inf,lambda.g,pathogen,ctc.dec,compl){
mu<-infectious.period.length(pathogen = pathogen)
meanIP<-mean.ip(pathogen = pathogen)
beta.g<-q.g*lambda.g
hh.id<-HH.network %v% "hh_id"
hh.size<-HH.network %v% "hh_size"
n<-length(hh.id)
m<- length(unique(hh.id)) # number of households
m.n<-rep(0,max(unique(hh.size))) # number of household of a specific size (position 1 size 1, position 2 size 2, ....)
R0<-0
for (i in 1:length(m.n)){
m.n[i]<-length(unique(hh.id[which(hh.size==i)]))
}
h.n<-m.n/m #proportion of household of a specific size
mu.h<-sum(h.n*(1:length(h.n)))
#divide network in sizes
for (j in 1:nSim){
AR<-list()
for (s in 1:max(unique(hh.size))) {
AR[[s]]<-0
}
for (w in unique(hh.id)){
if (min(hh.size[which(hh.id==w)])>1){
hh.data<-data.frame("members"= which(hh.id==w),"id"=1:length(which(hh.id==w)),"status"=0,"recovery"=Inf, "index.contact"=0, "betah"=0, "SO"=Inf, "ToI"=Inf)
#index case
for (r in hh.data$id){
ifelse(length(get.neighborhood(HH.network, hh.data$members[r]))>0,hh.data$betah[r]<-(length(get.neighborhood(HH.network, hh.data$members[r]))*q.h),hh.data$betah[r]<-1/rexp(1,1/exp(100)))
}
primary<-sample(1:length(hh.data$members),1)
hh.data$status[primary]<-1
hh.data$recovery[primary]<-mu
hh.data$index.contact[primary]<-1
hh.data$betah[primary]<-hh.data$IM[primary]*asymp.rel.inf
hh.data$ToI[primary]<-0
contact.time<-data.frame("id"=hh.data$members,"pr.ctc"=rep(NA,length(hh.data$members)),"pr.infectee"=rep(NA,length(hh.data$members)))   #matrix containing the proposed time of the next possible infectious contact (first colum)
current.time<-0
events<-data.frame(NextCtc        = Inf,
HomeIso       = Inf,
Recovery       = Inf)
while ((length(which(hh.data$status==1))>0)) { # till there is at least one infectious individual
for (i in which(hh.data$index.contact==1) ){ # for all the individuals that has to propose a new contact
temp.contact.time<-rexp(1,hh.data$betah[i])+current.time
hh.members.contacted<-get.neighborhood(HH.network,hh.data$members[i], type = "out")
hh.data$index.contact[i]<-0
ifelse(length(hh.members.contacted)>0,contact.time$pr.infectee[i] <-sample(hh.members.contacted,1),contact.time$pr.infectee[i] <-NA)
if (length(hh.members.contacted)==1){contact.time$pr.infectee[i]<-hh.members.contacted}
ifelse(length(hh.members.contacted)>0,contact.time$pr.ctc[i]<-temp.contact.time ,contact.time$pr.ctc[i]<-NA)
}
#computation of the next event
ifelse(length(which(is.na(contact.time$pr.ctc)==FALSE))>0,events$NextCtc<-min(contact.time$pr.ctc, na.rm = T),events$NextCtc<-Inf)
events$Recovery<-min(hh.data$recovery, na.rm = T)
events$SymptOns<-min(hh.data$SO, na.rm = T)
next.evts<-colnames(events)[min(events)==events]
if (length(next.evts)>1){
next.evts<-sample(next.evts,1)
}
#next event is an infection
if (next.evts=="NextCtc"){
current.time<-events$NextCtc
infector<-which(contact.time$pr.ctc ==current.time)
infectee<-hh.data$id[which(hh.data$members==contact.time$pr.infectee[infector])]
if (hh.data$status[infectee]==0 & runif(1)<(InfMeasure(t=current.time-hh.data$ToI[infector], pathogen = pathogen))){
hh.data$status[infectee]<-1
hh.data$recovery[infectee]<-current.time+mu
if (runif(1)<prob.asym){
hh.data$betah[infectee]<-hh.data$betah[infectee]*asymp.rel.inf
}else{
if(runif(1)<compl){
hh.data$SO[infectee]<-current.time+incubation.period(pathogen = pathogen)
}
}
hh.data$ToI[infectee]<-current.time
hh.data$index.contact[infectee]<-1
hh.data$index.contact[infector]<-1
contact.time[infector,2:3]<-NA
}else{
hh.data$index.contact[infector]<-1
contact.time[infector,2:3]<-NA
}
}
if (next.evts=="Recovery"){
current.time<-events$Recovery
recovered<-which(hh.data$recovery==current.time)
hh.data$recovery[recovered]<-Inf
hh.data$status[recovered]<--1
contact.time[recovered,2:3]<-rep(NA,2)
}
if (next.evts=="HomeIso"){
current.time<-events$SHomeIso
symptomatic<-which(hh.data$SO==current.time)
hh.data$SO[symptomatic]<-Inf
contact.time[symptomatic,2:3]<-rep(NA,2)
if (ctc.dec!=0){
hh.data$betah[symptomatic]<-hh.data$betah[symptomatic]*ctc.dec
hh.data$index.contact[symptomatic]<-1
}
}
}
AR[[hh.size[hh.data$members[1]]]]<-c(AR[[hh.size[hh.data$members[1]]]],length(which(hh.data$status==-1)))
# sar - NA when no symptomatic infection are register
}
}
ar.a<-0
ar.a[1]<-1
for (s in 2:max(unique(hh.size))){
ar.a[s]<-ifelse(length(AR[[s]])>1,mean(AR[[s]][-1]),0)
}
AR<-list()
for (s in 1:max(unique(hh.size))) {
AR[[s]]<-0
}
for (w in unique(hh.id)){
if (min(hh.size[which(hh.id==w)])>1){
hh.data<-data.frame("members"= which(hh.id==w),"id"=1:length(which(hh.id==w)),"status"=0,"recovery"=Inf, "index.contact"=0, "betah"=0, "SO"=Inf, "ToI"=Inf)
#index case
for (r in hh.data$id){
ifelse(length(get.neighborhood(HH.network, hh.data$members[r]))>0,hh.data$betah[r]<-(length(get.neighborhood(HH.network, hh.data$members[r]))*q.h),hh.data$betah[r]<-1/rexp(1,1/exp(100)))
}
primary<-sample(1:length(hh.data$members),1)
hh.data$status[primary]<-1
hh.data$recovery[primary]<-mu
hh.data$index.contact[primary]<-1
if(runif(1)<compl){
hh.data$SO[primary]<-current.time+incubation.period(pathogen = pathogen)
}
hh.data$ToI[primary]<-0
contact.time<-data.frame("id"=hh.data$members,"pr.ctc"=rep(NA,length(hh.data$members)),"pr.infectee"=rep(NA,length(hh.data$members)))   #matrix containing the proposed time of the next possible infectious contact (first colum)
current.time<-0
events<-data.frame(NextCtc        = Inf,
HomeIso       = Inf,
Recovery       = Inf)
while ((length(which(hh.data$status==1))>0)) { # till there is at least one infectious individual
for (i in which(hh.data$index.contact==1) ){ # for all the individuals that has to propose a new contact
temp.contact.time<-rexp(1,hh.data$betah[i])+current.time
hh.members.contacted<-get.neighborhood(HH.network,hh.data$members[i], type = "out")
hh.data$index.contact[i]<-0
ifelse(length(hh.members.contacted)>0,contact.time$pr.infectee[i] <-sample(hh.members.contacted,1),contact.time$pr.infectee[i] <-NA)
if (length(hh.members.contacted)==1){contact.time$pr.infectee[i]<-hh.members.contacted}
ifelse(length(hh.members.contacted)>0,contact.time$pr.ctc[i]<-temp.contact.time ,contact.time$pr.ctc[i]<-NA)
}
#computation of the next event
ifelse(length(which(is.na(contact.time$pr.ctc)==FALSE))>0,events$NextCtc<-min(contact.time$pr.ctc, na.rm = T),events$NextCtc<-Inf)
events$Recovery<-min(hh.data$recovery, na.rm = T)
events$SymptOns<-min(hh.data$SO, na.rm = T)
next.evts<-colnames(events)[min(events)==events]
if (length(next.evts)>1){
next.evts<-sample(next.evts,1)
}
#next event is an infection
if (next.evts=="NextCtc"){
current.time<-events$NextCtc
infector<-which(contact.time$pr.ctc ==current.time)
infectee<-hh.data$id[which(hh.data$members==contact.time$pr.infectee[infector])]
if (hh.data$status[infectee]==0 & runif(1)<(InfMeasure(t=current.time-hh.data$ToI[infector], pathogen = pathogen))){
hh.data$status[infectee]<-1
hh.data$recovery[infectee]<-current.time+mu
if (runif(1)<prob.asym){
hh.data$betah[infectee]<-hh.data$betah[infectee]*asymp.rel.inf
}else{
if(runif(1)<compl){
hh.data$SO[infectee]<-current.time+incubation.period(pathogen = pathogen)
}
}
hh.data$ToI[infectee]<-current.time
hh.data$index.contact[infectee]<-1
hh.data$index.contact[infector]<-1
contact.time[infector,2:3]<-NA
}else{
hh.data$index.contact[infector]<-1
contact.time[infector,2:3]<-NA
}
}
if (next.evts=="Recovery"){
current.time<-events$Recovery
recovered<-which(hh.data$recovery==current.time)
hh.data$recovery[recovered]<-Inf
hh.data$status[recovered]<--1
contact.time[recovered,2:3]<-rep(NA,2)
}
if (next.evts=="HomeIso"){
current.time<-events$SHomeIso
symptomatic<-which(hh.data$SO==current.time)
hh.data$SO[symptomatic]<-Inf
contact.time[symptomatic,2:3]<-rep(NA,2)
if (ctc.dec!=0){
hh.data$betah[symptomatic]<-hh.data$betah[symptomatic]*ctc.dec
hh.data$index.contact[symptomatic]<-1
}
}
}
AR[[hh.size[hh.data$members[1]]]]<-c(AR[[hh.size[hh.data$members[1]]]],length(which(hh.data$status==-1)))
# sar - NA when no symptomatic infection are register
}
}
ar.s<-0
ar.s[1]<-1
for (s in 2:max(unique(hh.size))){
ar.s[s]<-ifelse(length(AR[[s]])>1,mean(AR[[s]][-1]),0)
}
FsH.a<-((sum(ar.a*(h.n)*(1:max(unique(hh.size)))))/mu.h)
FsH.s<-((sum(ar.s*(h.n)*(1:max(unique(hh.size)))))/mu.h)
beta.g.a<- beta.g*(asymp.rel.inf*h.n[1]+ (asymp.rel.inf/2+(asymp.rel.inf*prob.asym+(1-prob.asym))/2)*h.n[2]+(asymp.rel.inf/3+(asymp.rel.inf*prob.asym+(1-prob.asym))/3)*h.n[3]+(asymp.rel.inf/4+(asymp.rel.inf*prob.asym+(1-prob.asym))/4)*h.n[4]+(asymp.rel.inf/5+(asymp.rel.inf*prob.asym+(1-prob.asym))/5)*h.n[5]+(asymp.rel.inf/6+(asymp.rel.inf*prob.asym+(1-prob.asym))/6)*h.n[6]+(asymp.rel.inf/7+(asymp.rel.inf*prob.asym+(1-prob.asym))/7)*h.n[7])
beta.g.s<- beta.g*(h.n[1]+ (1/2+(asymp.rel.inf*prob.asym+(1-prob.asym))/2)*h.n[2]+(1/3+(asymp.rel.inf*prob.asym+(1-prob.asym))/3)*h.n[3]+(1/4+(asymp.rel.inf*prob.asym+(1-prob.asym))/4)*h.n[4]+(1/5+(asymp.rel.inf*prob.asym+(1-prob.asym))/5)*h.n[5]+(1/6+(asymp.rel.inf*prob.asym+(1-prob.asym))/6)*h.n[6]+(1/7+(asymp.rel.inf*prob.asym+(1-prob.asym))/7)*h.n[7])
m.aa<-FsH.a*beta.g.a*prob.asym
m.as<-FsH.a*beta.g.a*(1-prob.asym)
m.sa<-FsH.s*beta.g.s*prob.asym
m.ss<-FsH.s*beta.g.s*(1-prob.asym)
#m.aa<-((sum(ar.a*(h.n)*(1:max(unique(hh.size)))))/mu.h)*beta.g*(asymp.rel.inf*prob.asym+(1-prob.asym))*prob.asym
#m.as<-((sum(ar.a*(h.n)*(1:max(unique(hh.size)))))/mu.h)*beta.g*(asymp.rel.inf*prob.asym+(1-prob.asym))*(1-prob.asym)
#m.sa<-((sum(ar.s*(h.n)*(1:max(unique(hh.size)))))/mu.h)*beta.g*prob.asym*(asymp.rel.inf*prob.asym+(1-prob.asym))
#m.ss<-((sum(ar.s*(h.n)*(1:max(unique(hh.size)))))/mu.h)*beta.g*(asymp.rel.inf*prob.asym+(1-prob.asym))*(1-prob.asym)
R0[j]<-0.5*(m.aa+m.ss)+sqrt((((m.aa+m.ss)^2)/4)+m.as*m.sa)
print(j)
}
return(R0)
}
load("~/Library/CloudStorage/GoogleDrive-andrea.torneri@uhasselt.be/My Drive/Work/PhD/Co-infection/Multi-phatogen/HH_Networks_nVertex100_nNetw5.RData")
R<-0.9
ratio.qhqg<-8.27
rho<-0.3
rho<-0.7
alpha<-0.4
pathogen<-"FLU-A"
ctc.dec<-1
compl<-0
lambda.h<-3.34 #average number of daily within household (Mossong et al. 2008 - Belgium)
lambda.g<-8.29 #average number of daily contacts at a community level (Mossong et al. 2008 - Belgium)
library("network")
source("R_comp_netw.R")
ratio_hhgl<-lambda.h/lambda.g*ratio.qhqg
R.rif<-R
ratio_hhgl<-lambda.h/lambda.g*ratio.qhqg
R.rif<-R
nSim<-100
tol<-0.01*R.rif #tolerance is 0.5% of the target value
nSeed<-3082021
set.seed(nSeed)
#trs.prms.1<-R0.comp.Inf.new(ratio_hhgl=ratio.qhqg, HH.network = HH.networks, nSim = nSim, tol=tol,R.rif = R.rif, prob.asym=(1-rho),asymp.rel.inf=alpha,lambda.g = lambda.g,pathogen=pathogen,ctc.dec=ctc.dec,compl=compl)
trs.prms.2<-R0.comp.Inf.bc(ratio_hhgl=ratio.qhqg, HH.network = HH.networks, nSim = nSim, tol=tol,R.rif = R.rif, prob.asym=(1-rho),asymp.rel.inf=alpha,lambda.g = lambda.g,pathogen=pathogen,ctc.dec=ctc.dec,compl=compl)
library("network")
source("R_comp_netw.R")
ratio_hhgl<-lambda.h/lambda.g*ratio.qhqg
R.rif<-R
nSim<-100
tol<-0.01*R.rif #tolerance is 0.5% of the target value
nSeed<-3082021
set.seed(nSeed)
#trs.prms.1<-R0.comp.Inf.new(ratio_hhgl=ratio.qhqg, HH.network = HH.networks, nSim = nSim, tol=tol,R.rif = R.rif, prob.asym=(1-rho),asymp.rel.inf=alpha,lambda.g = lambda.g,pathogen=pathogen,ctc.dec=ctc.dec,compl=compl)
trs.prms.2<-R0.comp.Inf.bc(ratio_hhgl=ratio.qhqg, HH.network = HH.networks, nSim = nSim, tol=tol,R.rif = R.rif, prob.asym=(1-rho),asymp.rel.inf=alpha,lambda.g = lambda.g,pathogen=pathogen,ctc.dec=ctc.dec,compl=compl)
#load data
inf.path.h<-trs.prms.2$beta.h
inf.path.g<-trs.prms.2$q.g
t2<-0
sigma12<-sigma21<-1
prop.immune<-0
nSeeds.1<-nSeeds.2<-1
rho.1<-rho.2<-rho
alpha.as.1<-alpha.as.2<-alpha
lli.1<-lli.2<-1
pathogen.1<-pathogen.2<-pathogen
contact.reduction<-ctc.dec
t.stop<-365
t.seed<-10000
t2<-0.1
bc.1<-bc.2<-compl
reinf<-0
#Input parameters - fixed
library(ergm)
library(RGeode)
inf.path.1.h<-inf.path.h
inf.path.1.g<-inf.path.g
R
R<-1.1
R.rif<-R
nSim<-100
tol<-0.01*R.rif #tolerance is 0.5% of the target value
nSeed<-3082021
set.seed(nSeed)
#trs.prms.1<-R0.comp.Inf.new(ratio_hhgl=ratio.qhqg, HH.network = HH.networks, nSim = nSim, tol=tol,R.rif = R.rif, prob.asym=(1-rho),asymp.rel.inf=alpha,lambda.g = lambda.g,pathogen=pathogen,ctc.dec=ctc.dec,compl=compl)
trs.prms.2<-R0.comp.Inf.bc(ratio_hhgl=ratio.qhqg, HH.network = HH.networks, nSim = nSim, tol=tol,R.rif = R.rif, prob.asym=(1-rho),asymp.rel.inf=alpha,lambda.g = lambda.g,pathogen=pathogen,ctc.dec=ctc.dec,compl=compl)
#load data
inf.path.h<-trs.prms.2$beta.h
inf.path.g<-trs.prms.2$q.g
inf.path.2.h<-inf.path.h
inf.path.2.g<-inf.path.g
#Compute the reproduction number related to the selected network.
source("function.multipathogen.new.R")
nSim<-1000
epi.outbreak<-list()
nSeed<-1062021
set.seed(nSeed)
nm<-paste("t2_",t2, "_sigma12_",sigma12,"_sigma21_",sigma21,"_qh1_",inf.path.1.h,"_qg1_",inf.path.1.g,"_qh2_",inf.path.2.h,"_qg2_",inf.path.2.g, "_rho1_",rho.1,"_rho2_",rho.2,"_alpha1_",alpha.as.1,"_alpha2_",alpha.as.2,"_Path1",pathogen.1,"_Path2",pathogen.2,"_lli.1",lli.1,"_lli2",lli.2, sep = "")
print(nm)
for (i in 1:nSim){
print(i)
temp.HH.netw<-HH.networks[[sample(1:length(HH.networks),1)]]
epi.outbreak[[i]]<-sim.multipathogen(HH.network = temp.HH.netw, t2=t2, lambda.g = lambda.g, sigma12 = sigma12, sigma21 = sigma21, prop.immune = prop.immune, nSeeds.1 = nSeeds.1, nSeeds.2 = nSeeds.2, rho.1 = rho.1, rho.2 = rho.2, inf.path.1.h = inf.path.1.h,inf.path.1.g = inf.path.1.g, inf.path.2.h = inf.path.2.h,inf.path.2.g = inf.path.2.g, alpha.as.1=alpha.as.1,alpha.as.2=alpha.as.2, lli.1=lli.1,lli.2=lli.2, pathogen.1=pathogen.1, pathogen.2=pathogen.2, contact.reduction=contact.reduction, t.stop=t.stop, t.seed=t.seed, bc.1=bc.1, bc.2=bc.2, reinf=reinf, typeIC=typeIC, het.vac=het.vac)
}
hh<-NULL
hh1<-NULL
for (i in 1:1000){
hh<-c(hh,epi.outbreak[[i]]$FinalSize$FinalSize1)
if (epi.outbreak[[i]]$FinalSize$FinalSize1>10){
hh1<-c(hh1,epi.outbreak[[i]]$FinalSize$FinalSize1)
}
}
mean(hh)
mean(hh1)
hist(hh,seq(0,100,1))
hh2<-NULL
hh12<-NULL
for (i in 1:1000){
hh2<-c(hh2,epi.outbreak[[i]]$FinalSize$FinalSize2)
if (epi.outbreak[[i]]$FinalSize$FinalSize2>10){
hh12<-c(hh12,epi.outbreak[[i]]$FinalSize$FinalSize2)
}
}
mean(hh2)
mean(hh12)
hist(hh2,seq(0,100,1))
R<-1.3
R<-1.5
ratio_hhgl<-lambda.h/lambda.g*ratio.qhqg
R.rif<-R
nSim<-100
tol<-0.01*R.rif #tolerance is 0.5% of the target value
nSeed<-3082021
set.seed(nSeed)
#trs.prms.1<-R0.comp.Inf.new(ratio_hhgl=ratio.qhqg, HH.network = HH.networks, nSim = nSim, tol=tol,R.rif = R.rif, prob.asym=(1-rho),asymp.rel.inf=alpha,lambda.g = lambda.g,pathogen=pathogen,ctc.dec=ctc.dec,compl=compl)
trs.prms.2<-R0.comp.Inf.bc(ratio_hhgl=ratio.qhqg, HH.network = HH.networks, nSim = nSim, tol=tol,R.rif = R.rif, prob.asym=(1-rho),asymp.rel.inf=alpha,lambda.g = lambda.g,pathogen=pathogen,ctc.dec=ctc.dec,compl=compl)
#load data
inf.path.h<-trs.prms.2$beta.h
inf.path.g<-trs.prms.2$q.g
nSeeds.1<-nSeeds.2<-5
nSim<-100
epi.outbreak<-list()
nSeed<-1062021
set.seed(nSeed)
nm<-paste("t2_",t2, "_sigma12_",sigma12,"_sigma21_",sigma21,"_qh1_",inf.path.1.h,"_qg1_",inf.path.1.g,"_qh2_",inf.path.2.h,"_qg2_",inf.path.2.g, "_rho1_",rho.1,"_rho2_",rho.2,"_alpha1_",alpha.as.1,"_alpha2_",alpha.as.2,"_Path1",pathogen.1,"_Path2",pathogen.2,"_lli.1",lli.1,"_lli2",lli.2, sep = "")
print(nm)
for (i in 1:nSim){
print(i)
temp.HH.netw<-HH.networks[[sample(1:length(HH.networks),1)]]
epi.outbreak[[i]]<-sim.multipathogen(HH.network = temp.HH.netw, t2=t2, lambda.g = lambda.g, sigma12 = sigma12, sigma21 = sigma21, prop.immune = prop.immune, nSeeds.1 = nSeeds.1, nSeeds.2 = nSeeds.2, rho.1 = rho.1, rho.2 = rho.2, inf.path.1.h = inf.path.1.h,inf.path.1.g = inf.path.1.g, inf.path.2.h = inf.path.2.h,inf.path.2.g = inf.path.2.g, alpha.as.1=alpha.as.1,alpha.as.2=alpha.as.2, lli.1=lli.1,lli.2=lli.2, pathogen.1=pathogen.1, pathogen.2=pathogen.2, contact.reduction=contact.reduction, t.stop=t.stop, t.seed=t.seed, bc.1=bc.1, bc.2=bc.2, reinf=reinf, typeIC=typeIC, het.vac=het.vac)
}
hh<-NULL
hh1<-NULL
for (i in 1:100){
hh<-c(hh,epi.outbreak[[i]]$FinalSize$FinalSize1)
if (epi.outbreak[[i]]$FinalSize$FinalSize1>10){
hh1<-c(hh1,epi.outbreak[[i]]$FinalSize$FinalSize1)
}
}
mean(hh)
mean(hh1)
hist(hh,seq(0,100,1))
hh2<-NULL
hh12<-NULL
for (i in 1:100){
hh2<-c(hh2,epi.outbreak[[i]]$FinalSize$FinalSize2)
if (epi.outbreak[[i]]$FinalSize$FinalSize2>10){
hh12<-c(hh12,epi.outbreak[[i]]$FinalSize$FinalSize2)
}
}
mean(hh2)
mean(hh12)
hist(hh2,seq(0,100,1))
inf.path.2.h<-inf.path.h
inf.path.2.g<-inf.path.g
nSeeds.1<-nSeeds.2<-1
nSim<-1000
epi.outbreak<-list()
nSeed<-1062021
set.seed(nSeed)
nm<-paste("t2_",t2, "_sigma12_",sigma12,"_sigma21_",sigma21,"_qh1_",inf.path.1.h,"_qg1_",inf.path.1.g,"_qh2_",inf.path.2.h,"_qg2_",inf.path.2.g, "_rho1_",rho.1,"_rho2_",rho.2,"_alpha1_",alpha.as.1,"_alpha2_",alpha.as.2,"_Path1",pathogen.1,"_Path2",pathogen.2,"_lli.1",lli.1,"_lli2",lli.2, sep = "")
print(nm)
for (i in 1:nSim){
print(i)
temp.HH.netw<-HH.networks[[sample(1:length(HH.networks),1)]]
epi.outbreak[[i]]<-sim.multipathogen(HH.network = temp.HH.netw, t2=t2, lambda.g = lambda.g, sigma12 = sigma12, sigma21 = sigma21, prop.immune = prop.immune, nSeeds.1 = nSeeds.1, nSeeds.2 = nSeeds.2, rho.1 = rho.1, rho.2 = rho.2, inf.path.1.h = inf.path.1.h,inf.path.1.g = inf.path.1.g, inf.path.2.h = inf.path.2.h,inf.path.2.g = inf.path.2.g, alpha.as.1=alpha.as.1,alpha.as.2=alpha.as.2, lli.1=lli.1,lli.2=lli.2, pathogen.1=pathogen.1, pathogen.2=pathogen.2, contact.reduction=contact.reduction, t.stop=t.stop, t.seed=t.seed, bc.1=bc.1, bc.2=bc.2, reinf=reinf, typeIC=typeIC, het.vac=het.vac)
}
hh<-NULL
hh1<-NULL
for (i in 1:100){
hh<-c(hh,epi.outbreak[[i]]$FinalSize$FinalSize1)
if (epi.outbreak[[i]]$FinalSize$FinalSize1>10){
hh1<-c(hh1,epi.outbreak[[i]]$FinalSize$FinalSize1)
}
}
mean(hh)
mean(hh1)
hist(hh,seq(0,100,1))
hh2<-NULL
hh12<-NULL
for (i in 1:100){
hh2<-c(hh2,epi.outbreak[[i]]$FinalSize$FinalSize2)
if (epi.outbreak[[i]]$FinalSize$FinalSize2>10){
hh12<-c(hh12,epi.outbreak[[i]]$FinalSize$FinalSize2)
}
}
mean(hh2)
mean(hh12)
hist(hh2,seq(0,100,1))
