for (i in which(index.contact.within==1) ){ # for all the individuals that has to propose a global contact
contact.time.within$pr.ctc[i]<-rexp(1,transmission.parameters$contact_rate_within[i])+current.time# I generate the next interarrival time for individual i
index.contact.within[i]<-0
}
for (i in which(index.contact.between==1) ){ # for all the individuals that has to propose a global contact
contact.time.between$pr.ctc[i]<-rexp(1,transmission.parameters$contact_rate_between[i])+current.time# I generate the next interarrival time for individual i
index.contact.between[i]<-0
}
contact.time.overall<-c(contact.time.within$pr.ctc, contact.time.between$pr.ctc) #overall contact times
recovery.vector.overall<-c(status.matrix.1$Recovery ,status.matrix.2$Recovery)
homequarantine.day.overall<-c(homequarantine.day.1,homequarantine.day.2)
#Phase 2: identify the next event: possible infection, recovery or the start of the new pathogen infection
ifelse(length(which(is.na(contact.time.overall)==FALSE))>0,events$NextCtc<-min(contact.time.overall, na.rm = T),events$NextCtc<-Inf) # among all the proposed social contact between houeholds we select the minimum
ifelse(length(which(!is.infinite(homequarantine.day.overall)))>0,events$HomeQuarantine<-min(homequarantine.day.overall),events$HomeQuarantine<-Inf ) #minimum quarantine pathogen 1
ifelse(length(which(is.na(recovery.vector.overall)==FALSE))>0,events$Recovery<-min(recovery.vector.overall, na.rm = T),events$Recovery<-Inf) # among all the proposed social contact between houeholds we select the minimum
next.evts<-colnames(events)[which(min(events)==events)]
if (length(next.evts)>1){
next.evts<-sample(colnames(events)[which(min(events)==events)],1)
}
if (next.evts=="NextCtc"){
current.time<-events$NextCtc
if (length(min(contact.time.overall, na.rm = T))>1){ #when two contacts happen at the same time
selected.ctc<-sample(which(contact.time.overall==current.time),1)
if (selected.ctc!=n & selected.ctc!=2*n){
infector<- selected.ctc %% n
}else{
infector<- n
}
if (selected.ctc<=n){
infectee.pool<-get.neighborhood(HH.network,infector)
if (length(infectee.pool)>1){
infectee<-sample(infectee.pool,1) #pick a random individual in the class
}
if(length(infectee.pool)==1){
infectee<-infectee.pool #pick a random individual in the class
}
if(length(infectee.pool)==0){
infectee<-infector #just a trick to have acceptance rate 0 (infector is not susceptible)
}
index.contact.within[infector]<-1
contact.time.within$pr.ctc[infector]<-NA
ctc<-"hh"
}else{
infector<-which(contact.time.between$pr.ctc == events$NextCtc)
hh.members.temp<-which(hh.id==hh.id[infector])
infectee.pool<- setdiff(1:n,hh.members.temp) #individuals not in the same class
infectee<-sample(infectee.pool,1) #pick a random individual not in the class (and not a teacher)
index.contact.between[infector]<-1
contact.time.between$pr.ctc[infector]<-NA
ctc<-"g"
}
}else{
if (length(which(events$NextCtc==contact.time.within$pr.ctc))>0){ #if it is a within contact
infector<-which(contact.time.within$pr.ctc ==events$NextCtc)
infectee.pool<-get.neighborhood(HH.network,infector)
if (length(infectee.pool)>1){
infectee<-sample(infectee.pool,1) #pick a random individual in the class
}
if(length(infectee.pool)==1){
infectee<-infectee.pool #pick a random individual in the class
}
if(length(infectee.pool)==0){
infectee<-infector #just a trick to have acceptance rate 0 (infector is not susceptible)
}
index.contact.within[infector]<-1
contact.time.within$pr.ctc[infector]<-NA
ctc<-"hh"
}else{
infector<-which(contact.time.between$pr.ctc == events$NextCtc)
hh.members.temp<-which(hh.id==hh.id[infector])
infectee.pool<- setdiff(1:n,hh.members.temp) #individuals not in the same class
infectee<-sample(infectee.pool,1) #pick a random individual not in the class (and not a teacher)
index.contact.between[infector]<-1
contact.time.between$pr.ctc[infector]<-NA
ctc<-"g"
}
}
#Infection with pathogen 1
if (status.matrix.1$infected[infector]==1 & (status.matrix.1$infected[infectee]==0 | (status.matrix.1$infected[infectee]==-1 & reinf==1))){
# compute short interaction terms for pathogen.1 (having pathogen 2)
if (status.matrix.2$infected[infectee]==1){
short.inter<-sigma12
}else{
short.inter<-1
}
# compute long interaction terms for pathogen.1 (recovered from pathogen 2)
if (status.matrix.2$infected[infectee]==-1 & short.inter==1){
# long.inter<-long.inter.term.2(t=current.time,status.matrix = status.matrix.2,infectee = infectee)
long.inter<-LLImmlev(pathogen.v1 = pathogen.1, pathogen.v2 = pathogen.2, status.matrix.v1 = status.matrix.1, status.matrix.v2 =status.matrix.2, infectee = infectee,lli = lli.2, current.time = current.time, reinf = reinf, typeIC = typeIC)
}else{
long.inter<-1
}
#re-infection term
#re.inf<-Immlev.1(t=current.time,status.matrix = status.matrix.1,infectee = infectee,pathogen = pathogen.1)
ifelse(ctc=="g",q<-transmission.parameters$q1g[infector],q<-transmission.parameters$q1h[infector])
acc.rate.1<-InfMeasure(t= current.time- status.matrix.1$time.of.infection[infector] ,pathogen = pathogen.1)*short.inter*long.inter*q
if ((ctc=="g" & homequarantine[infectee]==1) | status.matrix.1$infected[infector]!=1 | status.matrix.1$infected[infectee]==1){acc.rate.1<-0}
if (acc.rate.1>1){err<-err+1}
if (runif(1)<acc.rate.1){
status.matrix.1$infected[infectee] <- 1
status.matrix.1$time.of.infection[infectee] <- current.time
status.matrix.1$infector[infectee] <- infector
status.matrix.1$Recovery[infectee]<-current.time+infectious.period.length(pathogen=pathogen.1)
if (runif(1)<rho.1){ #if symptomatic
transmission.parameters$q1h[infectee]<-inf.path.1.h #A single q parameter for everyone
transmission.parameters$q1g[infectee]<-inf.path.1.g #A single q parameter for everyone
status.matrix.1$TimeSymptomOnset[infectee]<-current.time+incubation.period(pathogen=pathogen.1)
if (runif(1)<bc.1){
homequarantine.day.1[infectee]<-status.matrix.1$TimeSymptomOnset[infectee]
}
status.matrix.1$severity[infectee]<-1
time.events<-rbind(time.events,c(current.time,1.1,infectee))
}else{
transmission.parameters$q1g[infectee]<-inf.path.1.g*alpha.as.1 #A single q parameter for everyone
transmission.parameters$q1h[infectee]<-inf.path.1.h*alpha.as.1 #A single q parameter for everyone
status.matrix.1$severity[infectee]<-2
time.events<-rbind(time.events,c(current.time,1.2,infectee))
}
if (infectives[infectee]==0){
infectives[infectee]<-1
contact.time.within$pr.ctc[infectee]<-ifelse(transmission.parameters$contact_rate_within[infectee]!=0,rexp(1,transmission.parameters$contact_rate_within[infectee])+current.time,Inf)       # I generate the next interarrival time for individual i
if (homequarantine[infectee]==0){
contact.time.between$pr.ctc[infectee]<-rexp(1,transmission.parameters$contact_rate_between[infectee])+current.time # I generate the next interarrival time for individual i
}
}
}
}
if (status.matrix.2$infected[infector]==1 & (status.matrix.2$infected[infectee]==0 | (status.matrix.2$infected[infectee]==-1 & reinf==1))){
if (status.matrix.1$infected[infectee]==1){
short.inter<-sigma21
}else{
short.inter<-1
}
if (status.matrix.1$infected[infectee]==-1 & short.inter==1){
long.inter<-LLImmlev(pathogen.v1 = pathogen.2, pathogen.v2 = pathogen.1, status.matrix.v1 = status.matrix.2, status.matrix.v2 =status.matrix.1, infectee = infectee,lli=lli.1,current.time = current.time, reinf = reinf, typeIC = typeIC)
}else{
long.inter<-1
}
#re-infection term
#re.inf<-Immlev.2(t=current.time,status.matrix = status.matrix.2,infectee = infectee,pathogen = pathogen.2)
ifelse(ctc=="g",q<-transmission.parameters$q2g[infector],q<-transmission.parameters$q2h[infector])
acc.rate.2<-InfMeasure(t=(current.time-status.matrix.2$time.of.infection[infector]),pathogen = pathogen.2)*short.inter*long.inter*q
if ((ctc=="g" & homequarantine[infectee]==1) | status.matrix.2$infected[infector]!=1 | status.matrix.2$infected[infectee]==1){acc.rate.2<-0}
if (acc.rate.2>1){err<-err+1}
if (runif(1)<acc.rate.2){
status.matrix.2$infected[infectee] <- 1
status.matrix.2$time.of.infection[infectee] <- current.time
status.matrix.2$infector[infectee] <- infector
status.matrix.2$Recovery[infectee]<-current.time+infectious.period.length(pathogen=pathogen.2)
if (runif(1)<rho.2){ #if symptomatic
transmission.parameters$q2h[infectee]<-inf.path.2.h #A single q parameter for everyone
transmission.parameters$q2g[infectee]<-inf.path.2.g #A single q parameter for everyone
status.matrix.2$TimeSymptomOnset[infectee]<-current.time+incubation.period(pathogen=pathogen.2)
if (runif(1)<bc.2){
homequarantine.day.2[infectee]<-status.matrix.2$TimeSymptomOnset[infectee]
}
status.matrix.2$severity[infectee]<-1
time.events<-rbind(time.events,c(current.time,2.1,infectee))
}else{
transmission.parameters$q2g[infectee]<-inf.path.2.g*alpha.as.2 #A single q parameter for everyone
transmission.parameters$q2h[infectee]<-inf.path.2.h*alpha.as.2 #A single q parameter for everyone
status.matrix.2$severity[infectee]<-2
time.events<-rbind(time.events,c(current.time,2.2,infectee))
}
if (infectives[infectee]==0){
infectives[infectee]<-1
contact.time.within$pr.ctc[infectee]<-ifelse(transmission.parameters$contact_rate_within[infectee]!=0,rexp(1,transmission.parameters$contact_rate_within[infectee])+current.time,Inf)       # I generate the next interarrival time for individual i
if (homequarantine[infectee]==0){
contact.time.between$pr.ctc[infectee]<-rexp(1,transmission.parameters$contact_rate_between[infectee])+current.time # I generate the next interarrival time for individual i
}
}
}
}
# compute the long and short interaction terms for pathogen.2
}
if (next.evts=="HomeQuarantine"){
current.time<-events$HomeQuarantine
quarantined.individuals<-which(homequarantine.day.overall==current.time)
for (k in quarantined.individuals){
if (k != n & k!= 2*n) {
temp.ind<- k %% n
}else{
temp.ind<-n
}
if (k>n){
homequarantine.day.2[temp.ind]<-Inf
stop.quarantine[temp.ind]<-status.matrix.2$Recovery[temp.ind]
}else{
homequarantine.day.1[temp.ind]<-Inf
stop.quarantine[temp.ind]<-status.matrix.1$Recovery[temp.ind]
}
if (homequarantine[temp.ind]==1){ #individual is already in quarantine for the other disease
stop.quarantine[temp.ind]<-max(status.matrix.2$Recovery[temp.ind],status.matrix.1$Recovery[temp.ind])
}
homequarantine[temp.ind]<-1
contact.time.between$pr.ctc[temp.ind]<-NA
index.contact.between[temp.ind]<-0
transmission.parameters$contact_rate_within[temp.ind]<-transmission.parameters$contact_rate_within[temp.ind]*contact.reduction
}
}
if (next.evts=="Recovery"){
current.time<-events$Recovery
temp.recovered<-which(recovery.vector.overall==events$Recovery)
for (recovered in temp.recovered){
if (recovered!= n & recovered!=n*2){
if (recovered > n){
recovered<- recovered %% n
Rt2<-comp.RT(status.matrix = status.matrix.2,individual = recovered,Rt=Rt2)
status.matrix.2$infected[recovered]<--1
status.matrix.2$Recovery[recovered]<-Inf
transmission.parameters$contact_rate_within[recovered]<-length(get.neighborhood(HH.network,recovered))
time.events<-rbind(time.events,c(current.time,-2,recovered))
if (status.matrix.1$infected[recovered]!=1){
infectives[recovered]<-0
contact.time.between$pr.ctc[recovered]<-NA
contact.time.within$pr.ctc[recovered]<-NA
index.contact.within[recovered]<-0
index.contact.between[recovered]<-0
}else{
if (homequarantine[recovered]==0){
index.contact.between[recovered]<-1
}
}
}else{
Rt1<-comp.RT(status.matrix = status.matrix.1,individual = recovered,Rt=Rt1)
status.matrix.1$infected[recovered]<--1
status.matrix.1$Recovery[recovered]<-Inf
transmission.parameters$contact_rate_within[recovered]<-length(get.neighborhood(HH.network,recovered))
time.events<-rbind(time.events,c(current.time,-1,recovered))
if (status.matrix.2$infected[recovered]!=1){
infectives[recovered]<-0
contact.time.between$pr.ctc[recovered]<-NA
contact.time.within$pr.ctc[recovered]<-NA
index.contact.within[recovered]<-0
index.contact.between[recovered]<-0
}else{
if (homequarantine[recovered]==0){
index.contact.between[recovered]<-1
}
}
}
}else{
if (recovered == 2*n){
recovered<- n
Rt2<-comp.RT(status.matrix = status.matrix.2,individual = recovered,Rt=Rt2)
status.matrix.2$infected[recovered]<--1
status.matrix.2$Recovery[recovered]<-Inf
transmission.parameters$contact_rate_within[recovered]<-length(get.neighborhood(HH.network,recovered))
time.events<-rbind(time.events,c(current.time,-2,recovered))
if (status.matrix.1$infected[recovered]!=1){
infectives[recovered]<-0
contact.time.between$pr.ctc[recovered]<-NA
contact.time.within$pr.ctc[recovered]<-NA
index.contact.within[recovered]<-0
index.contact.between[recovered]<-0
}else{
if (homequarantine[recovered]==0){
index.contact.between[recovered]<-1
}
}
}else{
Rt1<-comp.RT(status.matrix = status.matrix.1,individual = recovered,Rt=Rt1)
status.matrix.1$infected[recovered]<--1
status.matrix.1$Recovery[recovered]<-Inf
transmission.parameters$contact_rate_within[recovered]<-length(get.neighborhood(HH.network,recovered))
time.events<-rbind(time.events,c(current.time,-1,recovered))
if (status.matrix.2$infected[recovered]!=1){
infectives[recovered]<-0
contact.time.between$pr.ctc[recovered]<-NA
contact.time.within$pr.ctc[recovered]<-NA
index.contact.within[recovered]<-0
index.contact.between[recovered]<-0
}else{
if (homequarantine[recovered]==0){
index.contact.between[recovered]<-1
}
}
}
}
if (stop.quarantine[recovered]==current.time){
homequarantine[recovered]<-0
stop.quarantine[recovered]<-Inf
}
}
}
if (next.evts=="NewPathogen"){
current.time<-events$NewPathogen
events$NewPathogen<-Inf
first.cases<-sample(1:n,nSeeds.2)
for (j in first.cases){
first<-j
status.matrix.2$infected[first] <- 1
status.matrix.2$time.of.infection[first] <- current.time
status.matrix.2$Recovery[first]<-current.time+infectious.period.length(pathogen=pathogen.2)
if (runif(1)<rho.2){ #if symptomatic
transmission.parameters$q2h[first]<-inf.path.2.h #A single q parameter for everyone
transmission.parameters$q2g[first]<-inf.path.2.g #A single q parameter for everyone
status.matrix.2$severity[first]<-1
status.matrix.2$TimeSymptomOnset[first]<-current.time+incubation.period(pathogen=pathogen.2)
if (runif(1)<bc.2){
homequarantine.day.2[first]<-status.matrix.2$TimeSymptomOnset[first]
}
time.events<-rbind(time.events,c(current.time,2.1,first))
}else{
transmission.parameters$q2h[first]<-inf.path.2.h*alpha.as.2 #A single q parameter for everyone
transmission.parameters$q2g[first]<-inf.path.2.g*alpha.as.2 #A single q parameter for everyone
status.matrix.2$severity[first]<-2
time.events<-rbind(time.events,c(current.time,2.2,first))
}
if (infectives[first]==0){
infectives[first]<-1
contact.time.within$pr.ctc[first]<-ifelse(transmission.parameters$contact_rate_within[first]!=0,rexp(1,transmission.parameters$contact_rate_within[first])+current.time,Inf)       # I generate the next interarrival time for individual i
if (homequarantine[first]==0){
contact.time.between$pr.ctc[first]<-rexp(1,transmission.parameters$contact_rate_between[first])+current.time # I generate the next interarrival time for individual i
}
}
}
}
if (next.evts=="NewSeeding1"){
current.time<-events$NewSeeding1
events$NewSeeding1<-current.time+t.seed
not.infected<-which(status.matrix.1$infected!=1)
if (nSeeds.1<length(not.infected)){
first.cases<-sample(not.infected,nSeeds.1)
for (j in first.cases){
first<-j
status.matrix.1$infected[first] <- 1
status.matrix.1$time.of.infection[first] <- current.time
status.matrix.1$Recovery[first]<-current.time+infectious.period.length(pathogen=pathogen.1)
if (runif(1)<rho.1){ #if symptomatic
transmission.parameters$q1h[first]<-inf.path.1.h #A single q parameter for everyone
transmission.parameters$q1g[first]<-inf.path.1.g #A single q parameter for everyone
status.matrix.1$severity[first]<-1
status.matrix.1$TimeSymptomOnset[first]<-current.time+incubation.period(pathogen=pathogen.2)
if (runif(1)<bc.1){
homequarantine.day.1[first]<-status.matrix.1$TimeSymptomOnset[first]
}
time.events<-rbind(time.events,c(current.time,1.1,first))
}else{
transmission.parameters$q1h[first]<-inf.path.1.h*alpha.as.1 #A single q parameter for everyone
transmission.parameters$q1g[first]<-inf.path.1.g*alpha.as.1 #A single q parameter for everyone
status.matrix.1$severity[first]<-2
time.events<-rbind(time.events,c(current.time,1.2,first))
}
if (infectives[first]==0){
infectives[first]<-1
contact.time.within$pr.ctc[first]<-ifelse(transmission.parameters$contact_rate_within[first]!=0,rexp(1,transmission.parameters$contact_rate_within[first])+current.time,Inf)       # I generate the next interarrival time for individual i
if (homequarantine[first]==0){
contact.time.between$pr.ctc[first]<-rexp(1,transmission.parameters$contact_rate_between[first])+current.time # I generate the next interarrival time for individual i
}
}
}
}
}
if (next.evts=="NewSeeding2"){
current.time<-events$NewSeeding1
events$NewSeeding2<-current.time+t.seed
not.infected<-which(status.matrix.2$infected!=1)
if (nSeeds.2<length(not.infected)){
first.cases<-sample(not.infected,nSeeds.2)
for (j in first.cases){
first<-j
status.matrix.2$infected[first] <- 1
status.matrix.2$time.of.infection[first] <- current.time
status.matrix.2$Recovery[first]<-current.time+infectious.period.length(pathogen=pathogen.2)
if (runif(1)<rho.2){ #if symptomatic
transmission.parameters$q2h[first]<-inf.path.2.h #A single q parameter for everyone
transmission.parameters$q2g[first]<-inf.path.2.g #A single q parameter for everyone
status.matrix.2$severity[first]<-1
status.matrix.2$TimeSymptomOnset[first]<-current.time+incubation.period(pathogen=pathogen.2)
if (runif(1)<bc.2){
homequarantine.day.2[first]<-status.matrix.2$TimeSymptomOnset[first]
}
time.events<-rbind(time.events,c(current.time,2.1,first))
}else{
transmission.parameters$q2h[first]<-inf.path.2.h*alpha.as.2 #A single q parameter for everyone
transmission.parameters$q2g[first]<-inf.path.2.g*alpha.as.2 #A single q parameter for everyone
status.matrix.2$severity[first]<-2
time.events<-rbind(time.events,c(current.time,2.2,first))
}
if (infectives[first]==0){
infectives[first]<-1
contact.time.within$pr.ctc[first]<-ifelse(transmission.parameters$contact_rate_within[first]!=0,rexp(1,transmission.parameters$contact_rate_within[first])+current.time,Inf)       # I generate the next interarrival time for individual i
if (homequarantine[first]==0){
contact.time.between$pr.ctc[first]<-rexp(1,transmission.parameters$contact_rate_between[first])+current.time # I generate the next interarrival time for individual i
}
}
}
}
}
}
current.time
events
status.matrix.1$infected[infector]==1 & (status.matrix.1$infected[infectee]==0 | (status.matrix.1$infected[infectee]==-1 & reinf==1))
status.matrix.2$infected[infectee]==1
status.matrix.2$infected[infectee]==-1 & short.inter==1
LLImmlev(pathogen.v1 = pathogen.1, pathogen.v2 = pathogen.2, status.matrix.v1 = status.matrix.1, status.matrix.v2 =status.matrix.2, infectee = infectee,lli = lli.2, current.time = current.time, reinf = reinf, typeIC = typeIC)
pathogen.v1<-pathogen.1
pathogen.v2<-pathogen.2
status.matrix.v1<-status.matrix.1
status.matrix.v2<-status.matrix.2
lli<-0.2
value<-1
reinf==0
status.matrix.v1$infected[infectee]!=0
status.matrix.v1$infected[infectee]==0 & status.matrix.v2[infectee]==-1
LLImmlev<-function(pathogen.v1,pathogen.v2,status.matrix.v1,status.matrix.v2,infectee,lli,current.time,reinf,typeIC){ #pathogen.v1 is the infection the infectee might catch
value<-1
if (reinf==0){
if (status.matrix.v1$infected[infectee]!=0){
value<-0
}
if (status.matrix.v1$infected[infectee]==0 & status.matrix.v2$infected[infectee]==-1){
value<-lli
}
}else{
if ((pathogen.v1 =="FLU-A")){ # For FLU we assume that re-infection is possible only for a vaccine-induced immunity
if (status.matrix.v1$infected[infectee]==0 & status.matrix.v1$Immunity[infectee]==1){
value<-VE.flu()
}
if (status.matrix.v1$infected[infectee]==1 | status.matrix.v1$infected[infectee]==-1){
value<-0
}
}
if ((pathogen.v1 =="COVID-19")){
if (status.matrix.v1$infected[infectee]==0 & status.matrix.v1$Immunity[infectee]==1 | status.matrix.v1$infected[infectee]==-1){
value<-VE.COVID()
}
if (status.matrix.v1$infected[infectee]==1){
value<-0
}
}
if (pathogen.v1 == "DELTA"){
if (status.matrix.v1$infected[infectee]==0){
if (status.matrix.v1$Immunity[infectee]==1){
value<-VE.COVID()
}else{
if (status.matrix.v2$infected[infectee]==-1 ){
value<-VaccineEffectiveness(t=status.matrix.v2$time.of.infection[infectee],typeIC = typeIC)
}
}
}
if (status.matrix.v1$infected[infectee]==-1){
value<-VE.COVID
}
}
if (pathogen.v1 == "OMICRON"){
if (status.matrix.v1$infected[infectee]==0){
if (status.matrix.v1$Immunity[infectee]==1){
if (status.matrix.v2$infected[infectee]==0){
value<-VaccineEffectiveness(t=0,typeIC = typeIC)
}
if (status.matrix.v2$infected[infectee]==-1){
value<-VaccineEffectiveness(t=status.matrix.v2$time.of.infection[infectee],typeIC = typeIC)
}
}else{
if (status.matrix.v2$infected[infectee]==-1 ){
value<-VaccineEffectiveness(t=status.matrix.v2$time.of.infection[infectee],typeIC = typeIC)
}
}
}
if (status.matrix.v1$infected[infectee]==-1){
value<-VE.COVID
}
}
}
return(value)
}
LLImmlev(pathogen.v1 = pathogen.1, pathogen.v2 = pathogen.2, status.matrix.v1 = status.matrix.1, status.matrix.v2 =status.matrix.2, infectee = infectee,lli = lli.2, current.time = current.time, reinf = reinf, typeIC = typeIC)
nSim<-20
epi.outbreak<-list()
nSeed<-1062021
set.seed(nSeed)
nm<-paste("t2_",t2, "_sigma12_",sigma12,"_sigma21_",sigma21,"_qh1_",inf.path.1.h,"_qg1_",inf.path.1.g,"_qh2_",inf.path.2.h,"_qg2_",inf.path.2.g, "_rho1_",rho.1,"_rho2_",rho.2,"_alpha1_",alpha.as.1,"_alpha2_",alpha.as.2,"_Path1",pathogen.1,"_Path2",pathogen.2,"_lli.1",lli.1,"_lli2",lli.2, sep = "")
print(nm)
for (i in 1:nSim){
print(i)
temp.HH.netw<-HH.networks[[sample(1:length(HH.networks),1)]]
epi.outbreak[[i]]<-sim.multipathogen(HH.network = temp.HH.netw, t2=t2, lambda.g = lambda.g, sigma12 = sigma12, sigma21 = sigma21, prop.immune = prop.immune, nSeeds.1 = nSeeds.1, nSeeds.2 = nSeeds.2, rho.1 = rho.1, rho.2 = rho.2, inf.path.1.h = inf.path.1.h,inf.path.1.g = inf.path.1.g, inf.path.2.h = inf.path.2.h,inf.path.2.g = inf.path.2.g, alpha.as.1=alpha.as.1,alpha.as.2=alpha.as.2, lli.1=lli.1,lli.2=lli.2, pathogen.1=pathogen.1, pathogen.2=pathogen.2, contact.reduction=contact.reduction, t.stop=t.stop, t.seed=t.seed, bc.1=bc.1, bc.2=bc.2, reinf=reinf, typeIC=typeIC)
}
R0.comp.Inf<-function(ratio_hhgl,tol,R.rif,HH.network,nSim,prob.asym,asymp.rel.inf,lambda.h,pathogen,ctc.dec,compl){
beta.g<-1
beta.h<-ratio_hhgl*beta.g
beta.g.tempm<-0
beta.g.tempM<-10
R.temp<-NULL
for (i in 1:nSim){
temp.HH.netw<-HH.network[[sample(1:length(HH.network),1)]]
R.temp<-c(R.temp,R0.computation.Inf(HH.network = temp.HH.netw, beta.g = beta.g, beta.h = beta.h, nSim = 1,prob.asym=prob.asym,asymp.rel.inf=asymp.rel.inf,lambda.h = lambda.h,pathogen = pathogen,ctc.dec = ctc.dec, compl = compl))
}
R.temp<-mean(R.temp)
while (abs(mean(R.temp)-R.rif)>tol){
R.temp<-NULL
for (i in 1:nSim){
temp.HH.netw<-HH.network[[sample(1:length(HH.network),1)]]
R.temp<-c(R.temp,R0.computation.Inf(HH.network = temp.HH.netw, beta.g = beta.g, beta.h = beta.h, nSim = 1,prob.asym=prob.asym,asymp.rel.inf=asymp.rel.inf,lambda.h = lambda.h,pathogen = pathogen,ctc.dec = ctc.dec, compl = compl))
}
R.temp<-mean(R.temp)
if (mean(R.temp)>R.rif){
beta.g.tempM<-beta.g
beta.g<-runif(1,min = beta.g.tempm,max = beta.g)
beta.h<-beta.g*ratio_hhgl
}else{
beta.g.tempm<-beta.g
beta.g<-runif(1,min = beta.g, max = beta.g.tempM)
beta.h<-beta.g*ratio_hhgl
}
print(c(R.rif,mean(R.temp),abs(mean(R.temp)-R.rif)))
}
transm.prms<-data.frame("beta.g"=beta.g, "beta.h"=beta.h)
return(transm.prms)
}
