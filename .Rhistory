}
}
primary<-sample(1:length(hh.data$members),1)
hh.data$status[primary]<-1
hh.data$recovery[primary]<-mu
hh.data$index.contact[primary]<-1
hh.data$SO[primary]<-incubation.period(pathogen = pathogen)
hh.data$ToI[primary]<-0
contact.time<-data.frame("id"=hh.data$members,"pr.ctc"=rep(NA,length(hh.data$members)),"pr.infectee"=rep(NA,length(hh.data$members)))   #matrix containing the proposed time of the next possible infectious contact (first colum)
current.time<-0
events<-data.frame(NextCtc        = Inf,
SymptOns       = Inf,
Recovery       = Inf)
while ((length(which(hh.data$status==1))>0)) { # till there is at least one infectious individual
for (i in which(hh.data$index.contact==1) ){ # for all the individuals that has to propose a new contact
temp.contact.time<-rexp(1,hh.data$betah[i])+current.time
hh.members.contacted<-get.neighborhood(HH.network,hh.data$members[i], type = "out")
hh.data$index.contact[i]<-0
ifelse(length(hh.members.contacted)>0,contact.time$pr.infectee[i] <-sample(hh.members.contacted,1),contact.time$pr.infectee[i] <-NA)
if (length(hh.members.contacted)==1){contact.time$pr.infectee[i]<-hh.members.contacted}
ifelse(length(hh.members.contacted)>0,contact.time$pr.ctc[i]<-temp.contact.time ,contact.time$pr.ctc[i]<-NA)
}
#computation of the next event
ifelse(length(which(is.na(contact.time$pr.ctc)==FALSE))>0,events$NextCtc<-min(contact.time$pr.ctc, na.rm = T),events$NextCtc<-Inf)
events$Recovery<-min(hh.data$recovery, na.rm = T)
events$SymptOns<-min(hh.data$SO, na.rm = T)
next.evts<-colnames(events)[min(events)==events]
if (length(next.evts)>1){
next.evts<-sample(next.evts,1)
}
#next event is an infection
if (next.evts=="NextCtc"){
current.time<-events$NextCtc
infector<-which(contact.time$pr.ctc ==current.time)
infectee<-hh.data$id[which(hh.data$members==contact.time$pr.infectee[infector])]
if (hh.data$status[infectee]==0 & runif(1)<InfMeasure(t=current.time-hh.data$ToI[infector], pathogen = pathogen)){
hh.data$status[infectee]<-1
hh.data$recovery[infectee]<-current.time+mu
hh.data$SO[infectee]<-current.time+incubation.period(pathogen = pathogen)
hh.data$ToI[infectee]<-current.time
hh.data$index.contact[infectee]<-1
hh.data$index.contact[infector]<-1
contact.time[infector,2:3]<-NA
}else{
hh.data$index.contact[infector]<-1
contact.time[infector,2:3]<-NA
}
}
if (next.evts=="Recovery"){
current.time<-events$Recovery
recovered<-which(hh.data$recovery==current.time)
hh.data$recovery[recovered]<-Inf
hh.data$status[recovered]<--1
contact.time[recovered,2:3]<-rep(NA,2)
}
if (next.evts=="SymptOns"){
current.time<-events$SymptOns
symptomatic<-which(hh.data$SO==current.time)
hh.data$SO[symptomatic]<-Inf
hh.data$betah[symptomatic]<-hh.data$betah[symptomatic]*ctc.dec
contact.time[symptomatic,2:3]<-rep(NA,2)
hh.data$index.contact[symptomatic]<-1
}
}
AR[[hh.size[hh.data$members[1]]]]<-c(AR[[hh.size[hh.data$members[1]]]],length(which(hh.data$status==-1)))
# sar - NA when no symptomatic infection are register
}
ar<-0
for (s in 1:max(unique(hh.size))){
ar[s]<-ifelse(length(AR[[s]])>1,mean(AR[[s]][-1]),0)
}
if (compl==0){
if (n.asympt==n){
R0[j]<-(beta.g*mu*asymp.rel.inf)*(sum(ar*(h.n)*(1:max(unique(hh.size)))))/mu.h
}
if (n.asympt==0){
R0[j]<-(beta.g*mu)*(sum(ar*(h.n)*(1:max(unique(hh.size)))))/mu.h
}
if (n.asympt!=n & n.asympt!=0){
R0[j]<-((beta.g*mu*(n- n.asympt)/n)+ (beta.g*mu*asymp.rel.inf*n.asympt/n))*(sum(ar*(h.n)*(1:max(unique(hh.size)))))/mu.h
}
}else{
if (n.asympt==n){
R0[j]<-(beta.g*asymp.rel.inf)*(sum(ar*(h.n)*(1:max(unique(hh.size)))))/mu.h
}
if (n.asympt==0){
R0[j]<-(beta.g*meanIP*compl+beta.g*mu*(1-compl)) *(sum(ar*(h.n)*(1:max(unique(hh.size)))))/mu.h
}
if (n.asympt!=n & n.asympt!=0){
R0[j]<-(((beta.g*meanIP*compl+beta.g*mu*(1-compl))*(n- n.asympt)/n)+ (beta.g*mu*asymp.rel.inf*n.asympt/n))*(sum(ar*(h.n)*(1:max(unique(hh.size)))))/mu.h
}
}
print(j)
}
return(R0)
}
R0.comp.Inf<-function(ratio_hhgl,tol,R.rif,HH.network,nSim,prob.asym,asymp.rel.inf,lambda.h,pathogen,ctc.dec,compl){
mu<-infectious.period.length(pathogen = pathogen)
beta.g<-1
beta.h<-ratio_hhgl*beta.g
beta.g.tempm<-0
beta.g.tempM<-10
R.temp<-NULL
for (i in 1:nSim){
temp.HH.netw<-HH.network[[sample(1:length(HH.network),1)]]
R.temp<-c(R.temp,R0.computation.Inf(HH.network = temp.HH.netw, beta.g = beta.g, beta.h = beta.h, nSim = 1,prob.asym=prob.asym,asymp.rel.inf=asymp.rel.inf,lambda.h = lambda.h,pathogen = pathogen,ctc.dec = ctc.dec, compl = compl))
}
R.temp<-mean(R.temp)
while (abs(mean(R.temp)-R.rif)>tol){
R.temp<-NULL
for (i in 1:nSim){
temp.HH.netw<-HH.network[[sample(1:length(HH.network),1)]]
R.temp<-c(R.temp,R0.computation.Inf(HH.network = temp.HH.netw, beta.g = beta.g, beta.h = beta.h, nSim = 1,prob.asym=prob.asym,asymp.rel.inf=asymp.rel.inf,lambda.h = lambda.h,pathogen = pathogen,ctc.dec = ctc.dec, compl = compl))
}
R.temp<-mean(R.temp)
if (mean(R.temp)>R.rif){
beta.g.tempM<-beta.g
beta.g<-runif(1,min = beta.g.tempm,max = beta.g)
beta.h<-beta.g*ratio_hhgl
}else{
beta.g.tempm<-beta.g
beta.g<-runif(1,min = beta.g, max = beta.g.tempM)
beta.h<-beta.g*ratio_hhgl
}
print(c(R.rif,mean(R.temp),abs(mean(R.temp)-R.rif)))
}
transm.prms<-data.frame("beta.g"=beta.g*mu, "beta.h"=beta.h)
return(transm.prms)
}
Comp.R0<-function(HH.network,nSim,transm.prms,prob.asym,asymp.rel.in,pathogen,ctc.dec,compl){
beta.g<-transm.prms$beta.g
beta.h<-transm.prms$beta.h
R.temp<-NULL
for (i in 1:nSim){
temp.HH.netw<-HH.network[[sample(1:length(HH.network),1)]]
R.temp<-c(R.temp,R0.computation.Inf(HH.network = temp.HH.netw, beta.g = beta.g, beta.h = beta.h, nSim = 1,prob.asym=prob.asym,asymp.rel.inf=asymp.rel.inf,lambda.h = lambda.h,pathogen = pathogen,ctc.dec = ctc.dec, compl = compl))
}
return(R.temp)
}
incubation.period<-function(pathogen){
if (pathogen=="COVID-19" | pathogen == "DELTA" | pathogen== "OMICRON"){
return(rlnorm(1,meanlog = log(5.2), sdlog = log(1.7)))
}
if (pathogen=="FLU-A"){
return(rlnorm(1,meanlog = log(1.4), sdlog = log(1.51)))
}
if (pathogen=="RSV"){
return(rlnorm(1,meanlog = log(4.4), sdlog = log(1.24)))
}
if (pathogen == "XP"){
return(1)
}
if (pathogen == "XS"){
return(2)
}
if (pathogen == "XA"){
return(3)
}
}
mean.ip<-function(pathogen){
if (pathogen=="COVID-19" | pathogen == "DELTA" | pathogen== "OMICRON"){
return(5.288462)
}
if (pathogen=="FLU-A"){
return(2)
}
if (pathogen == "XP"){
return(1)
}
if (pathogen == "XS"){
return(2)
}
if (pathogen == "XA"){
return(3)
}
}
infectious.period.length<-function(pathogen){
if (pathogen=="COVID-19" | pathogen=="OMICRON" | pathogen=="DELTA"){
return(15)
}
if (pathogen=="FLU-A"){
return(8)
}
if (pathogen=="FLU-B"){
return(4.8)
}
if (pathogen == "XP" | pathogen == "XS" | pathogen == "XA"){
return(4)
}
}
InfMeasure<-function(t,pathogen){
if (pathogen=="COVID-19" | pathogen=="DELTA" | pathogen=="OMICRON"){
return(dgamma(t,shape = 12, rate = 2.08)/ (pgamma(15,shape = 12,rate = 2.08)))
}
if (pathogen=="FLU-A"){
# Setting infectiousness measure according to Carrat et al. (2008) for H1N1
#VL<-data.frame(x=0:8,y=c(0,1.75,3,2.5,1.8,1.25,0.75,0.5,0))
#vl.flu<-nlsLM(y~a*dgamma(x=x,shape = s1,scale = sc1),start = list(a=10,s1=1.5,sc1=1.5),data = VL, weights = c(0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,1))
#prms<-vl.flu$m$getPars()
#print(prms)
#plot(seq(0,8,0.1),prms[1]*dgamma(x=seq(0,8,0.1),shape = prms[2],scale = prms[3]),ylim = c(0,3.1))
#points(VL, col="red")
#f.vl<-function(t){
#  return(prms[1]*dgamma(t,shape = prms[2],scale = prms[3]))
#}
#k<-integrate(f.vl,lower = 0,upper = 8)
#prms[1]/ k$value
return(1.014939*dgamma(t,shape = 3.2930139,scale = 0.9533298))
#return(dgamma(t,shape = 3.5, rate = 1.15)/ (pgamma(6.24,shape = 3.5,rate = 1.15)))
}
if (pathogen=="FLU-B"){
return(dgamma(t,shape = 3.5, rate = 1.15)/ (pgamma(6.24,shape = 3.5,rate = 1.15)))
}
if (pathogen=="RSV"){
return(dgamma(t,shape = 15, rate = 2.6)/ (pgamma(12,shape = 15,rate = 2.6)) )
}
if (pathogen == "XP" | pathogen == "XS" | pathogen == "XA"){
if (t <=2){
return(0.25*t)
}else{
return(-0.25*t+1)
}
}
}
mu<-infectious.period.length(pathogen = pathogen)
beta.g<-1
beta.h<-ratio_hhgl*beta.g
lambda.h/lambda.g
beta.h
beta.g
lambda.h
lambda.g
beta.h/lambda.h
beta.g/lambda.g
setwd("~/Library/CloudStorage/GoogleDrive-andrea.torneri@uhasselt.be/My Drive/Work/PhD/Co-infection/Multi-phatogen")
load("~/Library/CloudStorage/GoogleDrive-andrea.torneri@uhasselt.be/My Drive/Work/PhD/Co-infection/Multi-phatogen/HH_Networks_nVertex2500_nNetw100.RData")
R<-1.3
R.rif<-R
nSim<-20
tol<-0.01*R.rif #tolerance is 1% of the target value
nSeed<-3082021
set.seed(nSeed)
#trs.prms<-R0.comp(ratio_hhgl=ratio.qhqg, HH.network = HH.networks, nSim = nSim, tol=tol,R.rif = R.rif, prob.asym=(1-rho),asymp.rel.inf=alpha,lambda.h = lambda.h)
trs.prms<-R0.comp.Inf(ratio_hhgl=ratio_hhgl, HH.network = HH.networks, nSim = nSim, tol=tol,R.rif = R.rif, prob.asym=(1-rho),asymp.rel.inf=alpha,lambda.h = lambda.h,pathogen=pathogen,ctc.dec=ctc.dec,compl=compl)
inf.path.g<-trs.prms$beta.g/lambda.g
lambda.h<-3.34 #average number of daily within household (Mossong et al. 2008 - Belgium)
lambda.g<-8.29 #average number of daily contacts at a community level (Mossong et al. 2008 - Belgium)
library("network")
source("R_comp_netw.R")
ratio_hhgl<-lambda.h/lambda.g*ratio.qhqg
R.rif<-R
nSim<-20
tol<-0.01*R.rif #tolerance is 1% of the target value
nSeed<-3082021
set.seed(nSeed)
#trs.prms<-R0.comp(ratio_hhgl=ratio.qhqg, HH.network = HH.networks, nSim = nSim, tol=tol,R.rif = R.rif, prob.asym=(1-rho),asymp.rel.inf=alpha,lambda.h = lambda.h)
trs.prms<-R0.comp.Inf(ratio_hhgl=ratio_hhgl, HH.network = HH.networks, nSim = nSim, tol=tol,R.rif = R.rif, prob.asym=(1-rho),asymp.rel.inf=alpha,lambda.h = lambda.h,pathogen=pathogen,ctc.dec=ctc.dec,compl=compl)
#load data
inf.path.h<-trs.prms$beta.h/lambda.h
inf.path.g<-trs.prms$beta.g/lambda.g
4*inf.path.g*lambda.g
t2<-0
sigma12<-1
sigma21<-1
prop.immune<-0
nSeeds.1<-20
nSeeds.2<-20
rho.1<-1
rho.2<-1
alpha.as.1<-1
alpha.as.2<-1
R.1<-1.3
R.2<-1.3
lli.1<-1
lli.2<-1
pathogen.1<-"XS"
pathogen.2<-"XS"
contact.reduction<-1
t.stop<-365
t.seed<-1000
bc.1<-0
bc.2<-0
reinf<-0
typeIC<-1
contact.reduction.TP<-1
bc.1.TP<-1
bc.2.TP<-1
bc.2.TP<-0
bc.1.TP<-0
#Input parameters - fixed
library(ergm)
library(RGeode)
inf.path.1.h<-inf.path.h
inf.path.1.g<-inf.path.g
inf.path.2.h<-inf.path.h
inf.path.2.g<-inf.path.g
#Mean number of daily contact at a global level (Using SOCRATES 15/02/2022 )
lambda.g<-8.29
#Compute the reproduction number related to the selected network.
source("function.multipathogen.new.R")
nSim<-10
epi.outbreak<-list()
nSeed<-1062021
set.seed(nSeed)
nm<-paste("t2_",t2, "_sigma12_",sigma12,"_sigma21_",sigma21,"_qh1_",inf.path.1.h,"_qg1_",inf.path.1.g,"_qh2_",inf.path.2.h,"_qg2_",inf.path.2.g, "_rho1_",rho.1,"_rho2_",rho.2,"_alpha1_",alpha.as.1,"_alpha2_",alpha.as.2,"_Path1",pathogen.1,"_Path2",pathogen.2,"_lli.1",lli.1,"_lli2",lli.2, sep = "")
print(nm)
for (i in 1:nSim){
print(i)
temp.HH.netw<-HH.networks[[sample(1:length(HH.networks),1)]]
epi.outbreak[[i]]<-sim.multipathogen(HH.network = temp.HH.netw, t2=t2, lambda.g = lambda.g, sigma12 = sigma12, sigma21 = sigma21, prop.immune = prop.immune, nSeeds.1 = nSeeds.1, nSeeds.2 = nSeeds.2, rho.1 = rho.1, rho.2 = rho.2, inf.path.1.h = inf.path.1.h,inf.path.1.g = inf.path.1.g, inf.path.2.h = inf.path.2.h,inf.path.2.g = inf.path.2.g, alpha.as.1=alpha.as.1,alpha.as.2=alpha.as.2, lli.1=lli.1,lli.2=lli.2, pathogen.1=pathogen.1, pathogen.2=pathogen.2, contact.reduction=contact.reduction, t.stop=t.stop, t.seed=t.seed, bc.1=bc.1, bc.2=bc.2, reinf=reinf, typeIC=typeIC)
}
epi.outbreak[[1]]$FinalSize
epi.outbreak[[2]]$FinalSize
epi.outbreak[[3]]$FinalSize
epi.outbreak[[4]]$FinalSize
epi.outbreak[[5]]$FinalSize
epi.outbreak[[6]]$FinalSize
epi.outbreak[[7]]$FinalSize
epi.outbreak[[8]]$FinalSize
epi.outbreak[[9]]$FinalSize
inf.path.1.g<-inf.path.1.g*4
nSim<-10
epi.outbreak<-list()
nSeed<-1062021
set.seed(nSeed)
nm<-paste("t2_",t2, "_sigma12_",sigma12,"_sigma21_",sigma21,"_qh1_",inf.path.1.h,"_qg1_",inf.path.1.g,"_qh2_",inf.path.2.h,"_qg2_",inf.path.2.g, "_rho1_",rho.1,"_rho2_",rho.2,"_alpha1_",alpha.as.1,"_alpha2_",alpha.as.2,"_Path1",pathogen.1,"_Path2",pathogen.2,"_lli.1",lli.1,"_lli2",lli.2, sep = "")
print(nm)
for (i in 1:nSim){
print(i)
temp.HH.netw<-HH.networks[[sample(1:length(HH.networks),1)]]
epi.outbreak[[i]]<-sim.multipathogen(HH.network = temp.HH.netw, t2=t2, lambda.g = lambda.g, sigma12 = sigma12, sigma21 = sigma21, prop.immune = prop.immune, nSeeds.1 = nSeeds.1, nSeeds.2 = nSeeds.2, rho.1 = rho.1, rho.2 = rho.2, inf.path.1.h = inf.path.1.h,inf.path.1.g = inf.path.1.g, inf.path.2.h = inf.path.2.h,inf.path.2.g = inf.path.2.g, alpha.as.1=alpha.as.1,alpha.as.2=alpha.as.2, lli.1=lli.1,lli.2=lli.2, pathogen.1=pathogen.1, pathogen.2=pathogen.2, contact.reduction=contact.reduction, t.stop=t.stop, t.seed=t.seed, bc.1=bc.1, bc.2=bc.2, reinf=reinf, typeIC=typeIC)
}
epi.outbreak[[1]]$FinalSize
inf.path.1.h<-inf.path.1.h*4
nSim<-5
epi.outbreak<-list()
nSeed<-1062021
set.seed(nSeed)
nm<-paste("t2_",t2, "_sigma12_",sigma12,"_sigma21_",sigma21,"_qh1_",inf.path.1.h,"_qg1_",inf.path.1.g,"_qh2_",inf.path.2.h,"_qg2_",inf.path.2.g, "_rho1_",rho.1,"_rho2_",rho.2,"_alpha1_",alpha.as.1,"_alpha2_",alpha.as.2,"_Path1",pathogen.1,"_Path2",pathogen.2,"_lli.1",lli.1,"_lli2",lli.2, sep = "")
print(nm)
for (i in 1:nSim){
print(i)
temp.HH.netw<-HH.networks[[sample(1:length(HH.networks),1)]]
epi.outbreak[[i]]<-sim.multipathogen(HH.network = temp.HH.netw, t2=t2, lambda.g = lambda.g, sigma12 = sigma12, sigma21 = sigma21, prop.immune = prop.immune, nSeeds.1 = nSeeds.1, nSeeds.2 = nSeeds.2, rho.1 = rho.1, rho.2 = rho.2, inf.path.1.h = inf.path.1.h,inf.path.1.g = inf.path.1.g, inf.path.2.h = inf.path.2.h,inf.path.2.g = inf.path.2.g, alpha.as.1=alpha.as.1,alpha.as.2=alpha.as.2, lli.1=lli.1,lli.2=lli.2, pathogen.1=pathogen.1, pathogen.2=pathogen.2, contact.reduction=contact.reduction, t.stop=t.stop, t.seed=t.seed, bc.1=bc.1, bc.2=bc.2, reinf=reinf, typeIC=typeIC)
}
epi.outbreak[[1]]$FinalSize
1381/2500
epi.outbreak[[2]]$FinalSize
1035/2500
R0.comp.Inf<-function(ratio_hhgl,tol,R.rif,HH.network,nSim,prob.asym,asymp.rel.inf,lambda.h,pathogen,ctc.dec,compl){
mu<-infectious.period.length(pathogen = pathogen)
beta.g<-1
beta.h<-ratio_hhgl*beta.g/mu
beta.g.tempm<-0
beta.g.tempM<-10
R.temp<-NULL
for (i in 1:nSim){
temp.HH.netw<-HH.network[[sample(1:length(HH.network),1)]]
R.temp<-c(R.temp,R0.computation.Inf(HH.network = temp.HH.netw, beta.g = beta.g, beta.h = beta.h, nSim = 1,prob.asym=prob.asym,asymp.rel.inf=asymp.rel.inf,lambda.h = lambda.h,pathogen = pathogen,ctc.dec = ctc.dec, compl = compl))
}
R.temp<-mean(R.temp)
while (abs(mean(R.temp)-R.rif)>tol){
R.temp<-NULL
for (i in 1:nSim){
temp.HH.netw<-HH.network[[sample(1:length(HH.network),1)]]
R.temp<-c(R.temp,R0.computation.Inf(HH.network = temp.HH.netw, beta.g = beta.g, beta.h = beta.h, nSim = 1,prob.asym=prob.asym,asymp.rel.inf=asymp.rel.inf,lambda.h = lambda.h,pathogen = pathogen,ctc.dec = ctc.dec, compl = compl))
}
R.temp<-mean(R.temp)
if (mean(R.temp)>R.rif){
beta.g.tempM<-beta.g
beta.g<-runif(1,min = beta.g.tempm,max = beta.g)
beta.h<-beta.g*ratio_hhgl
}else{
beta.g.tempm<-beta.g
beta.g<-runif(1,min = beta.g, max = beta.g.tempM)
beta.h<-beta.g*ratio_hhgl
}
print(c(R.rif,mean(R.temp),abs(mean(R.temp)-R.rif)))
}
transm.prms<-data.frame("beta.g"=beta.g*mu, "beta.h"=beta.h)
return(transm.prms)
}
source("R_comp_netw.R")
ratio_hhgl<-lambda.h/lambda.g*ratio.qhqg
R.rif<-R
nSim<-20
tol<-0.01*R.rif #tolerance is 1% of the target value
nSeed<-3082021
set.seed(nSeed)
#trs.prms<-R0.comp(ratio_hhgl=ratio.qhqg, HH.network = HH.networks, nSim = nSim, tol=tol,R.rif = R.rif, prob.asym=(1-rho),asymp.rel.inf=alpha,lambda.h = lambda.h)
trs.prms<-R0.comp.Inf(ratio_hhgl=ratio_hhgl, HH.network = HH.networks, nSim = nSim, tol=tol,R.rif = R.rif, prob.asym=(1-rho),asymp.rel.inf=alpha,lambda.h = lambda.h,pathogen=pathogen,ctc.dec=ctc.dec,compl=compl)
R0.comp.Inf<-function(ratio_hhgl,tol,R.rif,HH.network,nSim,prob.asym,asymp.rel.inf,lambda.h,pathogen,ctc.dec,compl){
mu<-infectious.period.length(pathogen = pathogen)
beta.g<-1
beta.h<-ratio_hhgl*beta.g/mu
beta.g.tempm<-0
beta.g.tempM<-10
R.temp<-NULL
for (i in 1:nSim){
temp.HH.netw<-HH.network[[sample(1:length(HH.network),1)]]
R.temp<-c(R.temp,R0.computation.Inf(HH.network = temp.HH.netw, beta.g = beta.g, beta.h = beta.h, nSim = 1,prob.asym=prob.asym,asymp.rel.inf=asymp.rel.inf,lambda.h = lambda.h,pathogen = pathogen,ctc.dec = ctc.dec, compl = compl))
}
R.temp<-mean(R.temp)
while (abs(mean(R.temp)-R.rif)>tol){
R.temp<-NULL
for (i in 1:nSim){
temp.HH.netw<-HH.network[[sample(1:length(HH.network),1)]]
R.temp<-c(R.temp,R0.computation.Inf(HH.network = temp.HH.netw, beta.g = beta.g, beta.h = beta.h, nSim = 1,prob.asym=prob.asym,asymp.rel.inf=asymp.rel.inf,lambda.h = lambda.h,pathogen = pathogen,ctc.dec = ctc.dec, compl = compl))
}
R.temp<-mean(R.temp)
if (mean(R.temp)>R.rif){
beta.g.tempM<-beta.g
beta.g<-runif(1,min = beta.g.tempm,max = beta.g)
beta.h<-beta.g*ratio_hhgl/mu
}else{
beta.g.tempm<-beta.g
beta.g<-runif(1,min = beta.g, max = beta.g.tempM)
beta.h<-beta.g*ratio_hhgl/mu
}
print(c(R.rif,mean(R.temp),abs(mean(R.temp)-R.rif)))
}
transm.prms<-data.frame("beta.g"=beta.g*mu, "beta.h"=beta.h)
return(transm.prms)
}
ratio_hhgl<-lambda.h/lambda.g*ratio.qhqg
R.rif<-R
nSim<-20
tol<-0.01*R.rif #tolerance is 1% of the target value
nSeed<-3082021
set.seed(nSeed)
#trs.prms<-R0.comp(ratio_hhgl=ratio.qhqg, HH.network = HH.networks, nSim = nSim, tol=tol,R.rif = R.rif, prob.asym=(1-rho),asymp.rel.inf=alpha,lambda.h = lambda.h)
trs.prms<-R0.comp.Inf(ratio_hhgl=ratio_hhgl, HH.network = HH.networks, nSim = nSim, tol=tol,R.rif = R.rif, prob.asym=(1-rho),asymp.rel.inf=alpha,lambda.h = lambda.h,pathogen=pathogen,ctc.dec=ctc.dec,compl=compl)
#load data
inf.path.h<-trs.prms$beta.h/lambda.h
inf.path.g<-trs.prms$beta.g/lambda.g
R0.comp.Inf<-function(ratio_hhgl,tol,R.rif,HH.network,nSim,prob.asym,asymp.rel.inf,lambda.h,pathogen,ctc.dec,compl){
mu<-infectious.period.length(pathogen = pathogen)
beta.g<-1
beta.h<-ratio_hhgl*beta.g*mu
beta.g.tempm<-0
beta.g.tempM<-10
R.temp<-NULL
for (i in 1:nSim){
temp.HH.netw<-HH.network[[sample(1:length(HH.network),1)]]
R.temp<-c(R.temp,R0.computation.Inf(HH.network = temp.HH.netw, beta.g = beta.g, beta.h = beta.h, nSim = 1,prob.asym=prob.asym,asymp.rel.inf=asymp.rel.inf,lambda.h = lambda.h,pathogen = pathogen,ctc.dec = ctc.dec, compl = compl))
}
R.temp<-mean(R.temp)
while (abs(mean(R.temp)-R.rif)>tol){
R.temp<-NULL
for (i in 1:nSim){
temp.HH.netw<-HH.network[[sample(1:length(HH.network),1)]]
R.temp<-c(R.temp,R0.computation.Inf(HH.network = temp.HH.netw, beta.g = beta.g, beta.h = beta.h, nSim = 1,prob.asym=prob.asym,asymp.rel.inf=asymp.rel.inf,lambda.h = lambda.h,pathogen = pathogen,ctc.dec = ctc.dec, compl = compl))
}
R.temp<-mean(R.temp)
if (mean(R.temp)>R.rif){
beta.g.tempM<-beta.g
beta.g<-runif(1,min = beta.g.tempm,max = beta.g)
beta.h<-beta.g*ratio_hhgl*mu
}else{
beta.g.tempm<-beta.g
beta.g<-runif(1,min = beta.g, max = beta.g.tempM)
beta.h<-beta.g*ratio_hhgl*mu
}
print(c(R.rif,mean(R.temp),abs(mean(R.temp)-R.rif)))
}
transm.prms<-data.frame("beta.g"=beta.g*mu, "beta.h"=beta.h)
return(transm.prms)
}
ratio_hhgl<-lambda.h/lambda.g*ratio.qhqg
R.rif<-R
nSim<-20
tol<-0.01*R.rif #tolerance is 1% of the target value
nSeed<-3082021
set.seed(nSeed)
#trs.prms<-R0.comp(ratio_hhgl=ratio.qhqg, HH.network = HH.networks, nSim = nSim, tol=tol,R.rif = R.rif, prob.asym=(1-rho),asymp.rel.inf=alpha,lambda.h = lambda.h)
trs.prms<-R0.comp.Inf(ratio_hhgl=ratio_hhgl, HH.network = HH.networks, nSim = nSim, tol=tol,R.rif = R.rif, prob.asym=(1-rho),asymp.rel.inf=alpha,lambda.h = lambda.h,pathogen=pathogen,ctc.dec=ctc.dec,compl=compl)
#load data
inf.path.h<-trs.prms$beta.h/lambda.h
inf.path.g<-trs.prms$beta.g/lambda.g
#Compute the reproduction number related to the selected network.
source("function.multipathogen.new.R")
nSim<-10
epi.outbreak<-list()
nSeed<-1062021
set.seed(nSeed)
inf.path.2.h<-inf.path.h
inf.path.2.g<-inf.path.g
#Compute the reproduction number related to the selected network.
source("function.multipathogen.new.R")
nSim<-10
epi.outbreak<-list()
nSeed<-1062021
set.seed(nSeed)
nm<-paste("t2_",t2, "_sigma12_",sigma12,"_sigma21_",sigma21,"_qh1_",inf.path.1.h,"_qg1_",inf.path.1.g,"_qh2_",inf.path.2.h,"_qg2_",inf.path.2.g, "_rho1_",rho.1,"_rho2_",rho.2,"_alpha1_",alpha.as.1,"_alpha2_",alpha.as.2,"_Path1",pathogen.1,"_Path2",pathogen.2,"_lli.1",lli.1,"_lli2",lli.2, sep = "")
print(nm)
for (i in 1:nSim){
print(i)
temp.HH.netw<-HH.networks[[sample(1:length(HH.networks),1)]]
epi.outbreak[[i]]<-sim.multipathogen(HH.network = temp.HH.netw, t2=t2, lambda.g = lambda.g, sigma12 = sigma12, sigma21 = sigma21, prop.immune = prop.immune, nSeeds.1 = nSeeds.1, nSeeds.2 = nSeeds.2, rho.1 = rho.1, rho.2 = rho.2, inf.path.1.h = inf.path.1.h,inf.path.1.g = inf.path.1.g, inf.path.2.h = inf.path.2.h,inf.path.2.g = inf.path.2.g, alpha.as.1=alpha.as.1,alpha.as.2=alpha.as.2, lli.1=lli.1,lli.2=lli.2, pathogen.1=pathogen.1, pathogen.2=pathogen.2, contact.reduction=contact.reduction, t.stop=t.stop, t.seed=t.seed, bc.1=bc.1, bc.2=bc.2, reinf=reinf, typeIC=typeIC)
}
epi.outbreak[[1]]$FinalSize
epi.outbreak[[2]]$FinalSize
epi.outbreak[[3]]$FinalSize
epi.outbreak[[4]]$FinalSize
epi.outbreak[[5]]$FinalSize
epi.outbreak[[6]]$FinalSize
epi.outbreak[[7]]$FinalSize
epi.outbreak[[8]]$FinalSize
epi.outbreak[[9]]$FinalSize
epi.outbreak[[10]]$FinalSize
setwd("~/Library/CloudStorage/GoogleDrive-andrea.torneri@uhasselt.be/My Drive/Work/PhD/Co-infection/Multi-phatogen")
setwd("~/Library/CloudStorage/GoogleDrive-andrea.torneri@uhasselt.be/My Drive/Work/PhD/Co-infection/Multi-phatogen")
