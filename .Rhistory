}
}else{
return(FALSE)
}
}else{
return(FALSE)
}
}
####################################################################################
####################################################################################
# class.composition: Vector with the size of the classes
#
#
# INPUT:
#
# OUTPUT:
#
classes.composition.function<-function(gam.shape, gam.scale,n.classes){
return(rgamma(n.classes,shape = gam.shape, scale = gam.scale))
}
nSim
nSim<-3
for(i_sim in 1:nSim) {
#print(i_sim)
epi.outbreak[[i_sim]]<-nCov.simulator.Testing(n.teachers = n.teachers, lambda.b = lambda.b, lambda.w = lambda.w, rho.ch = rho.ch, rho.ad = rho.ad, alpha.as = alpha.as, R.s = R.s, classes.comp = classes.comp, seeds.ad = seeds.ad,seeds.ch = seeds.ch,test.sens.as = test.sens.as, test.sens.s = test.sens.s,test.delay.s = test.delay.s,test.delay.as = test.delay.as ,suscep.ch = suscep.ch,pdiagn.ch = pdiagn.ch,pdiagn.ad = pdiagn.ad, t.isolation = t.isolation, t.detection = t.detection, timewindow.closure = timewindow.closure, threshold.school = threshold.school,  prop.immune.ch=prop.immune.ch,  prop.immune.ad=prop.immune.ad, reseeding.ch=reseeding.ch, reseeding.ad=reseeding.ad, t.stop=t.stop, screening.delay = screening.delay, threshold.class = threshold.class, n.test.week = n.test.week,reg.screening.type = reg.screening.type,strategy=strategy, bool.log.contacts = bool.log.contacts,R.ctcs=R.ctcs, compliance=compliance)
} # end for-loop: nSim
epi.outbreak[[1]]$between.classes.contacts
epi.outbreak[[1]]$between.classes.contacts[[1]]
epi.outbreak[[1]]$between.classes.contacts[[2]]
epi.outbreak[[1]]$between.classes.contacts[[3]]
epi.outbreak[[1]]$between.classes.contacts[[4]]
epi.outbreak[[1]]$between.classes.contacts[[5]]
a<-epi.outbreak[[1]]$between.classes.contacts
a
a[[1]]
a[[2]]
a[[3]]
a[[4]]
a[[5]]
b<-as.character(a[[5]][-1])
b
paste0(b)
b<- paste0(as.character(a[[5]][-1]))
b<- paste0(as.character(a[[5]][-1]))
b<- paste0(as.character(a[[5]][-1]), sep="")
b<- paste0((a[[5]][-1]), sep="")
b
b<- paste((a[[5]][-1]), sep="")
c(a[[5]][2],a[[5]][3],a[[5]][4])
paste0(a[[5]][2],a[[5]][3],a[[5]][4])
paste0(a[[5]][2],a[[5]][3],a[[5]][4],sep=",")
paste(a[[5]][2],a[[5]][3],a[[5]][4],sep=",")
i<-1
temp.ctc.betw<-epi.outbreak[[i]]$between.classes.contacts
temp.ctc.betw
temp.ctc.betw[[5]]
temp.ctc.betw[[5]][-1]
paste(temp.ctc.betw,sep = "")
paste(temp.ctc.betw[[5]][-1],sep = "")
paste(temp.ctc.betw[[5]][-1],sep = ",")
paste(temp.ctc.betw[[5]][-1],sep = ",",collapse = "")
paste(temp.ctc.betw[[5]][-1],collapse = ",")
ctc.betw<-rep(NA,n)
for (i in 1:nSim) {
temp.ctc.betw<-epi.outbreak[[i]]$between.classes.contacts
for (j in 1:length(temp.ctc.betw)){
if (length(temp.ctc.betw[[j]][-1])>0){
ctc.betw[j]<-paste(temp.ctc.betw[[j]][-1],collapse = ",")
}
}
temp.status.matrix<-epi.outbreak[[i]]$status.matrix
dfn<-data.frame(ID=1:n,
StudentClass=temp.status.matrix$Category,
TeacherClass=temp.status.matrix$TeacherAssign,
IsIndex=temp.status.matrix$IndexCase,
InfectionTime=temp.status.matrix$time.of.infection,
InfectorID=temp.status.matrix$infector,
SymptOnsDate=temp.status.matrix$TimeSymptomOnset,
DayPosTest=temp.status.matrix$TimePosTest)
write.csv(dfn, paste0(out,"InfNetw_Sim",i,".csv"))
}
i<-1
ctc.betw<-rep(NA,n)
temp.ctc.betw<-epi.outbreak[[i]]$between.classes.contacts
for (j in 1:length(temp.ctc.betw)){
if (length(temp.ctc.betw[[j]][-1])>0){
ctc.betw[j]<-paste(temp.ctc.betw[[j]][-1],collapse = ",")
}
}
temp.status.matrix<-epi.outbreak[[i]]$status.matrix
dfn<-data.frame(ID=1:n,
StudentClass=temp.status.matrix$Category,
TeacherClass=temp.status.matrix$TeacherAssign,
IsIndex=temp.status.matrix$IndexCase,
InfectionTime=temp.status.matrix$time.of.infection,
InfectorID=temp.status.matrix$infector,
SymptOnsDate=temp.status.matrix$TimeSymptomOnset,
DayPosTest=temp.status.matrix$TimePosTest,
BetweenClassesCtc=ctc.betw)
dfn
View(dfn)
View(temp.ctc.betw)
ctc.betw
ctc.betw[362]
dfn
load("~/Desktop/for_Andre.RData")
subdata <- data.frame(wave=pert_df$Wave,cont=pert_df$Cont,age=pert_df$Age)
gb <- ggplot(subdata, aes(fill=age, y=cont, x=wave))+geom_bar(position="fill", stat="identity")+ scale_fill_brewer(palette = "Spectral") #+ scale_fill_viridis(discrete = T) + theme_ipsum()
library(ggplot2)
subdata <- data.frame(wave=pert_df$Wave,cont=pert_df$Cont,age=pert_df$Age)
gb <- ggplot(subdata, aes(fill=age, y=cont, x=wave))+geom_bar(position="fill", stat="identity")+ scale_fill_brewer(palette = "Spectral") #+ scale_fill_viridis(discrete = T) + theme_ipsum()
plot(gb)
subdata$age
data.duration$Duration<-factor(data.duration$Duration, levels =c("[0,6)","[6,12)","[12,18)","[30,40)","[40,50)","[50,60)","[60,70)", "70+") )
subdata$age<-factor(subdata$age, levels =c("[0,6)","[6,12)","[12,18)","[30,40)","[40,50)","[50,60)","[60,70)", "70+"))
gb <- ggplot(subdata, aes(fill=age, y=cont, x=wave))+geom_bar(position="fill", stat="identity")+ scale_fill_brewer(palette = "Spectral") #+ scale_fill_viridis(discrete = T) + theme_ipsum()
plot(gb)
subdata <- data.frame(wave=pert_df$Wave,cont=pert_df$Cont,age=pert_df$Age)
subdata$age
data.duration$Duration<-factor(data.duration$Duration, levels =c("[0,6)","[6,12)","[12,18)","[18,30)","[30,40)","[40,50)","[50,60)","[60,70)", "70+") )
subdata$age<-factor(subdata$age, levels =c("[0,6)","[6,12)","[12,18)","[18,30)","[30,40)","[40,50)","[50,60)","[60,70)", "70+"))
gb <- ggplot(subdata, aes(fill=age, y=cont, x=wave))+geom_bar(position="fill", stat="identity")+ scale_fill_brewer(palette = "Spectral") #+ scale_fill_viridis(discrete = T) + theme_ipsum()
plot(gb)
gb <- ggplot(subdata, aes(fill=age, y=cont, x=wave))+geom_bar(position="fill", stat="identity")+ scale_fill_brewer(palette = "Spectral")+theme_minimal()
#+ scale_fill_viridis(discrete = T) + theme_ipsum()
plot(gb)
nCov.InfMeasure<-function(t, lengthI){
vload.comp<-(15/lengthI)*dgamma(15/lengthI*t, shape = 12, scale = 0.48) #5.7 GT without interventions
return(vload.comp)
}
s<-rgamma(1000,shape = 32.14, scale = 0.47)
s<-rgamma(30,shape = 32.14, scale = 0.47)
for (i in s){
t<-seq(0,25,0.01)
plot(t,nCov.InfMeasure(t=t, lengthI = s[1]))
t<-seq(0,20,0.01)
plot(t,nCov.InfMeasure(t=t, lengthI = s[1]))
t<-seq(0,15,0.01)
plot(t,nCov.InfMeasure(t=t, lengthI = s[1]))
plot(t,nCov.InfMeasure(t=t,lengthI = s[1]))
for (i in s[-1]){
lines(t,nCov.InfMeasure(t=t,lengthI = s))
}
t<-seq(0,18,0.01)
plot(t,nCov.InfMeasure(t=t,lengthI = s[1]))
for (i in s[-1]){
lines(t,nCov.InfMeasure(t=t,lengthI = s))
}
warnings()
t<-seq(0,18,0.01)
plot(t,nCov.InfMeasure(t=t,lengthI = s[1]))
for (i in s[-1]){
lines(t,nCov.InfMeasure(t=t,lengthI = i))
}
plot(t,nCov.InfMeasure(t=t,lengthI = s[1]), xlim = c(0,18), ylim = c(0,0.3))
t<-seq(0,18,0.01)
plot(t,nCov.InfMeasure(t=t,lengthI = s[1]), xlim = c(0,18), ylim = c(0,0.3))
for (i in s[-1]){
lines(t,nCov.InfMeasure(t=t,lengthI = i))
}
t<-seq(0,18,0.01)
plot(t,nCov.InfMeasure(t=t,lengthI = s[1]), xlim = c(0,18), ylim = c(0,0.4))
for (i in s[-1]){
lines(t,nCov.InfMeasure(t=t,lengthI = i))
}
s<-rgamma(15,shape = 32.14,scale = 0.47)
s<-rgamma(15,shape = 32.14,scale = 0.47)
t<-seq(0,18,0.01)
plot(t,nCov.InfMeasure(t=t,lengthI = s[1]), xlim = c(0,18), ylim = c(0,0.4), xlab = "Days after infection", ylab = "Infectiousness")
s<-rgamma(15,shape = 32.14,scale = 0.47)
t<-seq(0,18,0.01)
plot(t,nCov.InfMeasure(t=t,lengthI = s[1]), xlim = c(0,18), ylim = c(0,0.4), xlab = "Days after infection", ylab = "Infectiousness",type = "l")
for (i in s[-1]){
lines(t,nCov.InfMeasure(t=t,lengthI = i), color=i)
}
warning()
warnings()
s<-rgamma(15,shape = 32.14,scale = 0.47)
t<-seq(0,18,0.01)
plot(t,nCov.InfMeasure(t=t,lengthI = s[1]), xlim = c(0,18), ylim = c(0,0.4), xlab = "Days after infection", ylab = "Infectiousness",type = "l")
k<-1
for (i in s[-1]){
k<-k+1
lines(t,nCov.InfMeasure(t=t,lengthI = i), color=k)
}
s<-rgamma(15,shape = 32.14,scale = 0.47)
t<-seq(0,18,0.01)
plot(t,nCov.InfMeasure(t=t,lengthI = s[1]), xlim = c(0,18), ylim = c(0,0.4), xlab = "Days after infection", ylab = "Infectiousness",type = "l")
k<-1
for (i in s[-1]){
k<-k+1
lines(t,nCov.InfMeasure(t=t,lengthI = i), colour=k)
}
lines(t,nCov.InfMeasure(t=t,lengthI = i), col=k)
s<-rgamma(15,shape = 32.14,scale = 0.47)
t<-seq(0,18,0.01)
plot(t,nCov.InfMeasure(t=t,lengthI = s[1]), xlim = c(0,18), ylim = c(0,0.4), xlab = "Days after infection", ylab = "Infectiousness",type = "l")
k<-1
for (i in s[-1]){
k<-k+1
lines(t,nCov.InfMeasure(t=t,lengthI = i), col=k)
}
s<-rgamma(15,shape = 32.14,scale = 0.47)
t<-seq(0,18,0.01)
plot(t,nCov.InfMeasure(t=t,lengthI = s[1]), xlim = c(0,18), ylim = c(0,0.4), xlab = "Days after infection", ylab = "Infectiousness",type = "l")
k<-2
for (i in s[-1]){
k<-k+1
lines(t,nCov.InfMeasure(t=t,lengthI = i), col=k)
}
plot(t,nCov.InfMeasure(t=t,lengthI = s[1]), xlim = c(0,18), ylim = c(0,0.4), xlab = "Days after infection", ylab = "Infectiousness",type = "l",lwd=1.2)
k<-2
for (i in s[-1]){
k<-k+1
lines(t,nCov.InfMeasure(t=t,lengthI = i), col=k)
}
plot(t,nCov.InfMeasure(t=t,lengthI = s[1]), xlim = c(0,18), ylim = c(0,0.4), xlab = "Days after infection", ylab = "Infectiousness",type = "l",lwd=1.8)
k<-2
for (i in s[-1]){
k<-k+1
lines(t,nCov.InfMeasure(t=t,lengthI = i), col=k)
}
k<-2
for (i in s[-1]){
k<-k+1
lines(t,nCov.InfMeasure(t=t,lengthI = i), col=k,lwd=1.8)
}
lines(t,nCov.InfMeasure(t=t,lengthI = i), col=k,lwd=1.6)
k<-2
for (i in s[-1]){
k<-k+1
lines(t,nCov.InfMeasure(t=t,lengthI = i), col=k,lwd=1.6)
}
t<-seq(0,18,0.01)
plot(t,nCov.InfMeasure(t=t,lengthI = s[1]), xlim = c(0,18), ylim = c(0,0.4), xlab = "Days after infection", ylab = "Infectiousness",type = "l",lwd=1.8)
k<-2
for (i in s[-1]){
k<-k+1
lines(t,nCov.InfMeasure(t=t,lengthI = i), col=k,lwd=1.6)
}
plot(t,nCov.InfMeasure(t=t,lengthI = s[1]), xlim = c(0,18), ylim = c(0,0.4), xlab = "Days after infection", ylab = "Infectivity",type = "l",lwd=1.8)
k<-2
for (i in s[-1]){
k<-k+1
lines(t,nCov.InfMeasure(t=t,lengthI = i), col=k,lwd=1.6)
}
k<-3
for (i in s[-1]){
k<-k+1
lines(t,nCov.InfMeasure(t=t,lengthI = i), col=k,lwd=1.6)
}
t<-seq(0,18,0.01)
plot(t,nCov.InfMeasure(t=t,lengthI = s[1]), xlim = c(0,18), ylim = c(0,0.4), xlab = "Days after infection", ylab = "Infectivity",type = "l",lwd=1.8)
k<-3
for (i in s[-1]){
k<-k+1
lines(t,nCov.InfMeasure(t=t,lengthI = i), col=k,lwd=1.6)
}
k<-4
plot(t,nCov.InfMeasure(t=t,lengthI = s[1]), xlim = c(0,18), ylim = c(0,0.4), xlab = "Days after infection", ylab = "Infectivity",type = "l",lwd=1.8)
k<-4
for (i in s[-1]){
k<-k+1
lines(t,nCov.InfMeasure(t=t,lengthI = i), col=k,lwd=1.6)
}
plot(t,nCov.InfMeasure(t=t,lengthI = s[1]), xlim = c(0,15), ylim = c(0,0.35), xlab = "Days after infection", ylab = "Infectivity",type = "l",lwd=1.8)
k<-4
for (i in s[-1]){
k<-k+1
lines(t,nCov.InfMeasure(t=t,lengthI = i), col=k,lwd=1.6)
}
x.shape<-0.2
x.scale<-1/0.2
hist(rgamma(1000,shape = x.shape,scale = x.scale))
y.shape<-0.2
y.shape<-5/0.2
hist(rgamma(1000, shape = y.shape, scale = y.scale))
y.shape<-0.2
y.scale<-5/0.2
hist(rgamma(1000, shape = y.shape, scale = y.scale))
hist(rgamma(10000, shape = y.shape, scale = y.scale))
hist(rgamma(1000,shape = x.shape,scale = x.scale)*5)
hist(rgamma(10000, shape = y.shape, scale = y.scale))
hist(rgamma(10000,shape = x.shape,scale = x.scale)*5)
hist(rgamma(10000, shape = y.shape, scale = y.scale))
hist(rgamma(10000,shape = x.shape,scale = x.scale)*5)
hist(rlnorm(1000, meanlog = log(1.4), sdlog = log(1.51)))
t<-seq(0,10,0.1)
vl.data<-data.frame("Days"=1:8, "Value"=c(1.75,3,2.5,1.75,1.25,0.75,0.5,0.25))
vl.data
plot(vl.data)
vl.data<-data.frame("Days"=0:8, "Value"=c(0,1.75,3,2.5,1.75,1.25,0.75,0.5,0.25))
plot(vl.data)
lm.fit(vl.data)
lm.fit(x=vl.data$Days,y=vl.data$Value)
t
plot(t,dgamma(t,shape = 2, scale = 2))
plot(vl.data)
lines(t,dgamma(t,shape = 2, scale = 2))
lines(t,5*dgamma(t,shape = 2, scale = 2))
lines(t,10*dgamma(t,shape = 2, scale = 2))
lines(t,30*dgamma(t,shape = 2, scale = 2))
lines(t,25*dgamma(t,shape = 2, scale = 2))
lines(t,20*dgamma(t,shape = 2, scale = 2))
lines(t,18*dgamma(t,shape = 2, scale = 2))
lines(t,17*dgamma(t,shape = 2, scale = 2))
plot(vl.data)
lines(t,17*dgamma(t,shape = 2, scale = 1.5))
lines(t,15*dgamma(t,shape = 2, scale = 1.5))
lines(t,14*dgamma(t,shape = 2, scale = 1.5))
lines(t,10*dgamma(t,shape = 2, scale = 1.5))
lines(t,12*dgamma(t,shape = 2, scale = 1.5))
plot(vl.data)
lines(t,12*dgamma(t,shape = 2, scale = 1.5))
plot(vl.data)
lines(t,dgamma(t,shape = 2, scale = 1.5))
lines(t,12*dgamma(t,shape = 2, scale = 1.5))
lines(t,12*dgamma(t,shape = 2, scale = 1.4))
lines(t,12*dgamma(t,shape = 2, scale = 1.8))
lines(t,12*dgamma(t,shape = 2, scale = 1.8))
plot(vl.data)
lines(t,12*dgamma(t,shape = 2.2, scale = 1.8))
lines(t,14*dgamma(t,shape = 2.2, scale = 1.8))
lines(t,15*dgamma(t,shape = 2.2, scale = 1.8))
plot(vl.data)
lines(t,15*dgamma(t,shape = 2.2, scale = 1.4))
lines(t,13*dgamma(t,shape = 2.2, scale = 1.4))
plot(vl.data)
lines(t,13*dgamma(t,shape = 2.2, scale = 1.4))
lines(t,13*dgamma(t,shape = 2.2, scale = 1.3))
lines(t,13*dgamma(t,shape = 2.2, scale = 1.6))
lines(t,13*dgamma(t,shape = 2.5, scale = 1.6))
lines(t,14*dgamma(t,shape = 2.5, scale = 1.6))
plot(vl.data)
lines(t,14*dgamma(t,shape = 2.5, scale = 1.6))
lines(t,14*dgamma(t,shape = 2.5, scale = 1.6))
lines(t,15*dgamma(t,shape = 2.5, scale = 1.6))
lines(t,16*dgamma(t,shape = 2.5, scale = 1.6))
lines(t,16*dgamma(t,shape = 2.5, scale = 1.5))
plot(vl.data)
lines(t,15*dgamma(t,shape = 2.5, scale = 1.5))
lines(t,15*dgamma(t,shape = 2.5, scale = 1.4))
lines(t,15*dgamma(t,shape = 2.5, scale = 1.3))
lines(t,14*dgamma(t,shape = 2.5, scale = 1.3))
plot(vl.data)
lines(t,14*dgamma(t,shape = 2.5, scale = 1.3))
plot(vl.data)
lines(t,13*dgamma(t,shape = 2.5, scale = 1.3))
plot(t, dgamma(t,shape = 2.5,scale = 1.3))
plot(t, dgamma(t,shape = 2.5,scale = 1.3), type = "l")
lines(t, dlnorm(t,meanlog = log(1.4), sdlog = log(1.51)), col="red")
plot(t, dgamma(t,shape = 2.5,scale = 1.3), type = "l", ylim = c(0,0.5))
lines(t, dlnorm(t,meanlog = log(1.4), sdlog = log(1.51)), col="red")
plot(t, dgamma(t,shape = 2.5,scale = 1.3), type = "l", ylim = c(0,1))
lines(t, dlnorm(t,meanlog = log(1.4), sdlog = log(1.51)), col="red")
InfMeasure<-function(t,pathogen){
if (pathogen=="COVID-19"){
return(dgamma(t,shape = 12, rate = 2.08)/ (pgamma(15,shape = 2,rate = 2.08)*0.98))
}
if (pathogen=="FLU-A"){
return(dgamma(t,shape = 3.5, rate = 1.15)/ (pgamma(6.24,shape = 3.5,rate = 1.15)*0.92))
# H1n1 (Resembling VL of Carrat et al. 2008 - dgamma (shape = 2.5, scale =1.3))
}
if (pathogen=="FLU-B"){
return(dgamma(t,shape = 3.5, rate = 1.15)/ (pgamma(6.24,shape = 3.5,rate = 1.15)*0.83))
}
if (pathogen=="RSV"){
return(dgamma(t,shape = 15, rate = 2.6)/ (pgamma(12,shape = 15,rate = 2.6)) )
}
}
incubation.period<-function(pathogen){
if (pathogen=="COVID-19"){
return(rlnorm(1,meanlog = log(5.2), sdlog = log(1.7)))
}
if (pathogen=="FLU-A"){
return(rlnorm(1,meanlog = log(1.4), sdlog = log(1.51)))
}
if (pathogen=="FLU-B"){
return(rlnorm(1,meanlog = log(0.6), sdlog = log(1.51)))
}
if (pathogen=="RSV"){
return(rlnorm(1,meanlog = log(4.4), sdlog = log(1.24)))
}
}
t<-seq(0,10,0.1)
t<-seq(0,15,0.1)
plot(t,incubation.period("COVID-19"))
plot(t,dlnorm(t,meanlog = log(5.2), sdlog = log(1.7)))
plot(t,dlnorm(t,meanlog = log(5.2), sdlog = log(1.7)), type = "l")
plot(t,dlnorm(t,meanlog = log(5.2), sdlog = log(1.7)), type = "l", ylim = c(0,0.5))
plot(t,dlnorm(t,meanlog = log(5.2), sdlog = log(1.7)), type = "l", ylim = c(0,0.5))
lines(t, InfMeasure(t,"COVID-19"))
plot(t,dlnorm(t,meanlog = log(5.2), sdlog = log(1.7)), type = "l", ylim = c(0,0.5))
lines(t, InfMeasure(t,"COVID-19"))
plot(t,dlnorm(t,meanlog = log(5.2), sdlog = log(1.7)), type = "l", ylim = c(0,0.5))
lines(t, InfMeasure(t,"COVID-19"), col="red")
lines(t,dlnorm(t,meanlog = log(1.4), sdlog = log(1.51)), type = "l", ylim = c(0,0.5), col="green")
lines(t, InfMeasure(t,"FLU-A"), col="red")
lines(t, InfMeasure(t,"FLU-A"), col="orange")
lines(t, dgamma(t,shape = 2.5,scale = 1.3), col="blue")
qlnorm(5)
qlnorm(5, meanlog = log(1.4), sdlog = log(1.51))
qlnorm(4, meanlog = log(1.4), sdlog = log(1.51))
qlnorm(3, meanlog = log(1.4), sdlog = log(1.51))
qlnorm(2, meanlog = log(1.4), sdlog = log(1.51))
plnorm(2, meanlog = log(1.4), sdlog = log(1.51))
plnorm(5, meanlog = log(1.4), sdlog = log(1.51))
40/143
InfMeasure<-function(t,pathogen){
if (pathogen=="COVID-19"){
return(dgamma(t,shape = 12, rate = 2.08)/ (pgamma(15,shape = 2,rate = 2.08)*0.98))
}
if (pathogen=="FLU-A"){
return(dgamma(t,shape = 3.5, rate = 1.15)/ (pgamma(6.24,shape = 3.5,rate = 1.15)*0.92))
# H1n1 (Resembling VL of Carrat et al. 2008 - dgamma (shape = 2.5, scale =1.3))
}
if (pathogen=="RSV"){
return(dgamma(t,shape = 15, rate = 2.6)/ (pgamma(12,shape = 15,rate = 2.6)) )
}
}
t<-seq(0,15,0.1)
plot(t,InfMeasure(t,"COVID-19"))
plot(t,InfMeasure(t,"COVID-19"), ylim = c(0,1))
plot(t,InfMeasure(t,"COVID-19"), ylim = c(0,0.5))
plot(t,InfMeasure(t,"COVID-19"), ylim = c(0,0.4))
lines(t, InfMeasure(t, "FLU-A"), col=)
lines(t, InfMeasure(t, "RSV"), col=)
integrate(InfMeasure(,"COVID-19"),lower = 0,upper = 10)
integrate(InfMeasure(t,"COVID-19"),lower = 0,upper = 10)
incubation.period<-function(pathogen){
if (pathogen=="COVID-19"){
return(rlnorm(1,meanlog = log(5.2), sdlog = log(1.7)))
}
if (pathogen=="FLU-A"){
return(rlnorm(1,meanlog = log(1.4), sdlog = log(1.51)))
}
#  if (pathogen=="FLU-B"){
#    return(rlnorm(1,meanlog = log(0.6), sdlog = log(1.51)))
#  }
if (pathogen=="RSV"){
return(rlnorm(1,meanlog = log(4.4), sdlog = log(1.24)))
}
}
InfMeasure<-function(t,pathogen){
if (pathogen=="COVID-19"){
return(dgamma(t,shape = 12, rate = 2.08)/ (pgamma(15,shape = 2,rate = 2.08)*0.98))
}
if (pathogen=="FLU-A"){
return(dgamma(t,shape = 3.5, rate = 1.15)/ (pgamma(6.24,shape = 3.5,rate = 1.15)*0.92))
}
if (pathogen=="FLU-B"){
return(dgamma(t,shape = 3.5, rate = 1.15)/ (pgamma(6.24,shape = 3.5,rate = 1.15)*0.83))
}
if (pathogen=="RSV"){
return(dgamma(t,shape = 15, rate = 2.6)/ (pgamma(12,shape = 15,rate = 2.6)) )
}
}
infectious.period.length<-function(pathogen){
if (pathogen=="COVID-19"){
return(12.1)
}
if (pathogen=="FLU-A"){
return(5.14)
}
if (pathogen=="FLU-B"){
return(3.7)
}
if (pathogen=="RSV"){
return(9.5)
}
}
t<-seq(0,15,0.1)
plot(t,incubation.period("FLU-A"), type = "l")
plot(t,dlnorm(t,meanlog = log(1.4),sdlog = log(1.51)), type = "l")
lines(t,InfMeasure(t,"FLU-A"), col="red")
plot(t,dlnorm(t,meanlog = log(5.2),sdlog = log(1.7)), type = "l")
lines(t,InfMeasure(t,"COVID-19"), col="red")
status.matrix.1<- data.frame(infected          = rep(0,n), # 1
time.of.infection = NA,        # 2
infector          = NA,        # 3
severity          = 0,         # 4 1 Symptomatic 2 Asymptomatic
TimeSymptomOnset  = Inf,       # 5
Recovery          = Inf)
n<-10
status.matrix.1<- data.frame(infected          = rep(0,n), # 1
time.of.infection = NA,        # 2
infector          = NA,        # 3
severity          = 0,         # 4 1 Symptomatic 2 Asymptomatic
TimeSymptomOnset  = Inf,       # 5
Recovery          = Inf)
status.matrix.2 <-status.matrix.1
InfMeasure<-function(t,pathogen){
if (pathogen=="COVID-19"){
return(dgamma(t,shape = 12, rate = 2.08)/ (pgamma(15,shape = 2,rate = 2.08)*0.98))
}
if (pathogen=="FLU-A"){
return(dgamma(t,shape = 3.5, rate = 1.15)/ (pgamma(6.24,shape = 3.5,rate = 1.15)*0.92))
}
if (pathogen=="FLU-B"){
return(dgamma(t,shape = 3.5, rate = 1.15)/ (pgamma(6.24,shape = 3.5,rate = 1.15)*0.83))
}
if (pathogen=="RSV"){
return(dgamma(t,shape = 15, rate = 2.6)/ (pgamma(12,shape = 15,rate = 2.6)) )
}
}
#transmission parameter dataframe: each line is an individual, the first colum is the transmsission coeffficient and the third the length of IP (needed to re-scale Viral load curve)
transmission.parameters<-data.frame("id"=1:n,"q1h"=rep(NA,n),"q1g"=rep(NA,n),"q2h"=rep(NA,n),"q2g"=rep(NA,n), "contact_rate_within"=rep(NA,n),"contact_rate_between"=lambda.g, "susceptibility"=rep(1,n))   #matrix containing the proposed time of the next contact (first colum) and the contact individual (second column)
lambda.g<-1
#transmission parameter dataframe: each line is an individual, the first colum is the transmsission coeffficient and the third the length of IP (needed to re-scale Viral load curve)
transmission.parameters<-data.frame("id"=1:n,"q1h"=rep(NA,n),"q1g"=rep(NA,n),"q2h"=rep(NA,n),"q2g"=rep(NA,n), "contact_rate_within"=rep(NA,n),"contact_rate_between"=lambda.g, "susceptibility"=rep(1,n))   #matrix containing the proposed time of the next contact (first colum) and the contact individual (second column)
transmission.parameters
setwd("~/Documents/Work/PhD/Co-infection/Multi-phatogen")
